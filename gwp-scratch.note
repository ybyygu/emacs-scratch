:PROPERTIES:
:ID:       a58b86ad-a96e-4b4f-b9de-acbaf9e5910f
:END:
#+TITLE: 个人文本交互系统(based on doom-emacs)
#+SETUPFILE: ~/Notes/common.org

* 参考
- [[https://github.com/daviwil/emacs-from-scratch/tree/master][daviwil/emacs-from-scratch: An example of a fully custom Emacs configuration developed live on YouTube!]]
- [[https://github.com/jwiegley/use-package][jwiegley/use-package: A use-package declaration for simplifying your .emacs]]
- [[https://github.com/SystemCrafters/crafted-emacs/tree/master/modules][crafted-emacs/modules at master · SystemCrafters/crafted-emacs]]
- [[https://git.sr.ht/~protesilaos/dotfiles/tree/master/item/emacs/.emacs.d][~protesilaos/dotfiles: emacs/.emacs.d/ - sourcehut git]]

* Memo [3/6]
** TODO [2022-10-26 Wed] 定义 prefix-map 的方法
John Wiegley 写的, 也许用这个替代 general?

[[https://github.com/jwiegley/use-package/blob/master/bind-key.el][use-package/bind-key.el at master · jwiegley/use-package]]

#+begin_src elisp :tangle no
(bind-keys :prefix-map toggle-map
           :prefix "C-c x"
           :prefix-docstring "Keymap for commands that toggle settings."
           ("c" . column-number-mode)
           ("d" . toggle-debug-on-error)
           ("t" . toggle-truncate-lines)
           ("s" . whitespace-mode)
           ("v" . variable-pitch-mode)
           ("i" . visible-mode))

(use-package bind-key
  :bind ("C-h y" . describe-personal-keybindings))
#+end_src

也可以这样
- [[https://github.com/SystemCrafters/crafted-emacs/blob/master/modules/crafted-windows.el][crafted-emacs/crafted-windows.el at master · SystemCrafters/crafted-emacs]]

** DONE [2022-10-24 Mon] 用 vertico 等替换 ivy/counsel 等包
- Note taken on [2022-10-27 Thu 20:23] \\
  还挺适应的
- State "DONE"       from "TODO"       [2022-10-27 Thu 20:23]

理由
- vertico 只 hack completing-read, 兼容性比 ivy 更强, 与 emacs 集成度更高, 更不易出错, 或出错会更容易找到原因.
- 性能更好, 据说搜索速度更快一些

资料
- [[https://www.youtube.com/watch?v=J0OaRy85MOo][Streamline Your Emacs Completions with Vertico - YouTube]]
- [[https://macowners.club/posts/from-ivy-to-vertico/][From Ivy & Counsel to Vertico & Consult | macOS & (open-source) Software]]
- [[https://www.youtube.com/watch?v=HzlLxWTD6QY][21天学会Emacs 2022 Edition（第四天：vertico, orderless, marginalia, embark） - YouTube]]
- [[https://www.youtube.com/watch?v=UtqE-lR2HCA][System Crafters Live! - Replacing Ivy and Counsel with Vertico and Consult - YouTube]]

** TODO [2022-10-18 Tue] 实现 doom 中类似 workspace 的功能
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Projects.html][Projects (GNU Emacs Manual)]]

另一种思路是使用 emacs-client, 不同的 workspace, 使用不同的 daemon. 但 recentf 等文件容易冲突吧?

+ [[https://github.com/alphapapa/bufler.el][alphapapa/bufler.el: A butler for your buffers. Group buffers into workspaces with programmable rules, and easily switch to and manipulate them.]]
+ [[https://github.com/mclear-tools/tabspaces][mclear-tools/tabspaces]]
+ [[https://github.com/alphapapa/burly.el#usage][alphapapa/burly.el: Save and restore frames and windows with their buffers in Emacs]]

** DONE [2022-10-14 Fri] 还是得从头搞起. doom 的容易出问题

- Note taken on [2022-10-27 Thu 20:25] \\
  服务器上简单修改下也是可用的
- State "DONE"       from "TODO"       [2022-10-17 Mon 17:57] \\
  基本可用
** DONE [2021-10-14 Thu] 简简单单从零开始, 配一个完全合心意的

- State "DONE"       from "TODO"       [2022-10-17 Mon 17:57]

* docs
** meow
- [[https://github.com/meow-edit/meow][meow-edit/meow: Yet another modal editing on Emacs / 猫态编辑]]
** use-package
use-package emacs
- [[https://github.com/jwiegley/use-package][jwiegley/use-package: A use-package declaration for simplifying your .emacs]]

** bindings
- [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][use-package/bind-key.el at master · jwiegley/use-package]]
- [[https://github.com/noctuid/general.el][noctuid/general.el: More convenient key definitions in emacs]]

* Tips
** keybindings
为各种按键生成一个漂亮的 org 文档
: general-describe-keybindings

弹窗列表显示
: which-key-show-keymap

minibuffer 显示, 可搜索过滤
: embark-bindings-in-keymap
** 大小写转换
仅在 insert mode 下有效
: M-l, M-u, M-c

** 统计字符数
M=
: count-words-region

** 拼写检查(spell)
$
: ispell-word

** 查看buffer major mode
eval var: major-mode

** org-mode
| org-kill-note-or-show-branches | C-c C-k | 查看headlines, 当前上下文TAB键无效时有用 |
| org-edit-special               | C-c '   | 默认按键难按, C-c C-,                    |

Movement
| Key Binding | Description                            |
|-------------+----------------------------------------|
| ~g h~       | Move up one level in headings          |
| ~g j~       | Move to next heading on same level     |
| ~g k~       | Move to previous heading on same level |
| ~g l~       | Move down one level in headings        |

refile流程:
- 打开refile.note
- 检查其中的条目, 找到可能的合适的归档note文件, 打开之.
- SPC-m-r-r, org-refile
- SPC-u SPC-m-r-r: 跳转至refile targets


** TODO 自动补全(completion)
- [[https://github.com/hlissner/doom-emacs/blob/develop/modules/completion/company/README.org][doom-emacs/README.org at develop · hlissner/doom-emacs]]

查看evil-insert-state-map中的绑定可知:

| C-x C-f | company-files 补全文件名, 类vim   |
| C-x C-s | company-yasnippet: 补全 yasnippet |
| C-x C-l | +company/whole-lines 补全行       |

** 各种跳转(jump/goto)
对于重要的位置, 可以按 m 键来标记, 随后可用 (SPC-r-j) ivy/jump-list 来跳转. 对于
简单的位置, 可以用 emacs marker ring, 保存时(SPC-SPC) 会自动记录.

register
- 使用单个字符来标记: mx
- 跳转到标记位置: `x 其中 x 为之前的标记.
- 查看已标记的列表: `C-h 或 C-r m (counsel-register)

| SPC-r-j         | better jump list         |
| g;              | goto-last-change         |
| g,              | goto-last-change-reverse |
| gi              | evil-insert-resume       |
| gv              | evil-visual-resume       |
| SPC-s-i         | imenu symbol             |
| Alt-mouse-wheel | jump backward/foraward   |
| SPC-j-m         | emacs mark ring          |

行内跳转
- f: 向行尾搜索单字母(evil-snipe-f)
- ?: 向行始搜索单字母(evil-ex-search-backward)

搜索跳转:
- 搜索单字母: avy-goto-char
- 搜索双字母: avy-goto-char-2
- 搜索任意字符: isearch + avy-search
- swiper + ivy-avy
- 在evil中按*或/键搜索当前word或任意词, 再SPC-j-j 启用avy jump

marking ring跳转
- 不同buffer: SPC-`
- 同一buffer: ``
- 同一buffer或不同buffer, 更远的位置:
  - emacs mark ring: SPC-j-m

** window/frame
| SPC w v   | vertical split                       |
| SPC w s   | horizontally split                   |
| SPC w d   | remove window                        |
| SPC w r   | swap windows                         |
| SPC w f   | tear off window, float window 很有用 |
| SPC w o   | 最大化popup                          |
| SPC w z   | 自动将当前window放大至合格大小       |
| SPC w u   | 撤销窗口改动                         |
| SPC o f   | 新开窗口, make-frame                 |

在新的 window 打开
: C-x 4 4
在新的 frame 打开
: C-x 5 5

在新的 tab 打开
: C-x t t

** 调试emacs
真好用.
: debug-on-error

在doom里可以用 SPC-h-d-d

也可启用profiler, SPC-h-d-t, 查看命令调用堆栈

** 书签管理
: SPC-f-b

#+BEGIN_SRC emacs-lisp :tangle no
(consult-bookmark)
#+END_SRC

** 切换只读模式
: C-x C-q
: SPC-t r

** magit
- 在magit status窗口, 可以直接使用dired访问文件: magit-dired-jump (C-M-i)
- 使用yadm管理dotfiles, SPC-g-.

| magit-status          | SPC-g-g                     |
| magit-stage-file      | s                           |
| magit-file-dispatch   | SPC-g-.                     |
| magit-log-buffer-file | Show log for current buffer |
| magit-delete-thing    | 按x, 可删除光标前文件       |

: reset: O
: discard: x
: git rm --cached: K

*** timemachine
: <normal-state> C-n    git-timemachine-show-next-revision
: <normal-state> C-p    git-timemachine-show-previous-revision


*** 处理当前文件的编辑历史
: magit-file-dispatch

*** fixup/rebase
当修改代码时发现之前某个commit 有误, 部分需要修补时, 可用 fixup 功能. 按 c 进入
commit 界面, 按f 进入 fixup 界面.

随后可用 rebase -> autosquash 自动将 fixup commit 与之前的合并.

参考: [[https://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html][GIT tip : Keep your branch clean with fixup and autosquash - Florent Lebreton]]




** 粘贴替换选中文字
vi模式下使用P命令. meow 中可用 C-y

** 使用外部程序打开文件的方式
emacs 默认使用 docview mode 来打开链接的文件, 比如 PDF 等, 不太方便. 操作步骤:
1. dired-jump (SPC-f-j): 使用 dired 打开当前文件所在目录
2. 在 dired 界面上选择某个文件, 使用 external 程序打开 (SPC-f-o).
3. 也可以在 dired 界面上用"!"或"&"命令, 指定任意程序打开.

** 打开buffer文件所在目录
~SPC-u SPC-f-o~

* init.el
:PROPERTIES:
:header-args: :tangle init.el
:END:
#+name: 158fcd0c
#+begin_src elisp
;; Load path
(push (expand-file-name "site-lisp" user-emacs-directory) load-path)
(push (expand-file-name "user-lisp" user-emacs-directory) load-path)

;; Packages
(require 'package)

(setq package-archives
      '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
        ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
        ("melpa-stable" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa-stable/")
        ("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
        ("nongnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

;; (use-package command-log-mode)

(require 'init-defaults)
(require 'init-core)
(require 'init-edit)
(require 'init-xxx)
(require 'init-ui)
(require 'init-dired)
(require 'init-workspace)
(require 'init-org)
(require 'init-develop)
(require 'init-note)
(require 'init-completion)
(require 'init-eaf)
(require 'init-bindings)
#+end_src

* user-lisp
** init-core.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-core.el
:END:
*** docs
这里处理最核心的设置或必要的功能扩充

#+name: 4cd1adaf
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** crux
#+name: 20ff3f1b
#+begin_src elisp
(use-package crux
  :config
  (bind-key [remap move-beginning-of-line] #'crux-move-beginning-of-line))
#+end_src

*** duplicate
可用的
- delete-duplicate-lines

#+name: 3eff5fa2
#+begin_src elisp
(defun gwp::duplicate-region (beg end)
  (interactive "r")
  (save-excursion
    (let* ((beg (or beg (region-beginning)))
           (end (or end (region-end)))
           (region (buffer-substring beg end)))
      (goto-char end)
      (insert region))))

(defun gwp::duplicate-line (&optional stay)
  (save-excursion
    (move-end-of-line nil)
    (save-excursion
      (insert (buffer-substring (point-at-bol) (point-at-eol))))
    (newline)))

(defun gwp::duplicate-line-or-region()
  "复制当前行或选定区域"
  (interactive)
  (if (region-active-p)
      ;; 也可用 crux-duplicate-current-line-or-region
      (call-interactively #'gwp::duplicate-region)
    (gwp::duplicate-line)))
#+end_src


*** kill/delete/yank
#+name: b5a74212
#+begin_src elisp
(setq kill-ring-max 999)

;; 粘贴时删除区域中的内容, 不污染clipboard, 方便连续yank.
(defun gwp::yank-dwim (arg)
  "粘贴并覆盖选定区域. 如果以C-u调用则提示从kill-ring中选择"
  (interactive "P")
  (when (region-active-p)
    (call-interactively #'delete-region))
  (if (equal arg '(4))                  ; C-u
      (call-interactively #'yank-pop)
    (call-interactively #'yank)))
(global-set-key (kbd "C-y") #'gwp::yank-dwim)

;; 保持和terminal中的行为一致: 删除选定区域或向后一个单词
(defun gwp::ctrl-w-dwim ()
  (interactive)
  (if (region-active-p)
      (call-interactively #'kill-region)
    (call-interactively #'backward-kill-word)))

;; (map! "C-w" #'gwp::ctrl-w-dwim); cut, copy: Alt-w
(global-set-key (kbd "C-w") #'gwp::ctrl-w-dwim)
;; 删除到行尾或删除整行
(global-set-key (kbd "C-k") #'crux-smart-kill-line)
#+end_src

删除字符或选定区域, 但不经过kill-ring
: delete-char (C-d, DELETE), delete-backward-char (BACKSPACE)
: delete-region

比如, 希望删除选定内容, 粘贴之前复制的内容. 因为不污染clipboard, 这样
就没必要从clipboard中选择内容了.
#+name: 7d5caf69
#+begin_src elisp
(defun gwp::ctrl-d-dwim (prefix)
  "清除区域或复制区域"
  (interactive "P")
  (if prefix                  ; C-u
      (call-interactively #'gwp::duplicate-line-or-region)
    (call-interactively #'gwp::delete-char-or-region)))

(defun gwp::delete-char-or-region()
  "清除光标前字符或选定区域"
  (interactive)
  (if mark-active
      (call-interactively #'delete-region)
    (delete-char 1)))

(global-set-key (kbd "C-d") #'gwp::ctrl-d-dwim)
#+end_src

供参考
[[https://github.com/Wilfred/.emacs.d/blob/gh-pages/init.el][.emacs.d/init.el at gh-pages · Wilfred/.emacs.d]]
#+begin_src elisp :tangle no
;; I sometimes want to simply delete a region, rather than
;; saving it to the kill-ring. I've added a function that allows me to
;; type =C-u C-w= to delete the region, whilst =C-w= works as normal.

(defun gwp::kill-or-delete-region (beg end prefix)
  "Delete the region, storing it in the kill-ring.
If a prefix argument is given, don't change the kill-ring."
  (interactive "r\nP")
  (if prefix
      (delete-region beg end)
    (kill-region beg end)))
#+end_src
*** symlink
#+name: 9e3bdda9
#+begin_src elisp
(use-package emacs
  :custom
  ;; 访问软链接文件时使用真实的文件路径, 避免文件项目
  (find-file-visit-truename t)
  (vc-follow-symlinks t))
#+end_src

*** undo
感觉emacs的undo比evil的强

默认绑定:
C-x u, C-_ C-/

C-u C-/ 如果选中区域, 则仅撤销当前内容.

#+name: 9f41280c
#+begin_src elisp
(defun gwp::undo-dwim ()
  (interactive)
  (if (region-active-p)
      (let ((current-prefix-arg '(4)))     ; C-u
        (call-interactively #'undo))
    (call-interactively #'undo)))

;; 默认evil的undo会将多个小操作合并为一个大的, undo时很不适应.
;; (setq evil-want-fine-undo t)
#+end_src
*** recentf
#+name: d9848746
#+begin_src elisp
(use-package recentf
  :custom
  ;; then run M-x recentf-cleanup to make it work.
  (recentf-exclude '("/tmp/"
                     "/ssh:"
                     "/sudo:"
                     "/scp:"
                     "/scpx:"
                     "/ssh:"
                     ;; "\\.pdf$"
                     "\\.png$"
                     "autosave$"
                     ;; "\\.odt$"
                     "\\.note_archive$"
                     "_workspaces"
                     ".*/COMMIT_EDITMSG$" ; magit 临时编辑文件
                     ;; ".*/$"               ; 剔除目录
                     ))
  (recentf-max-saved-items 9999)   ; the default is only 20
  (recentf-keep '(gwp::recentf-keep-p))
  ;; clean up items when has been idle 1 hour
  ;; (recentf-auto-cleanup 3600)
  (recentf-auto-cleanup 'never)         ; doom 在退出时清理
  :config
  (recentf-mode 1))

(defun gwp::recentf-keep-p (file)
  "仅保留本地可读文件"
  (not (file-remote-p file))
  ;; (and (not (file-remote-p file))
  ;;      (not (file-directory-p file)))
  )

;; 定义保存临时文件列表. 默认仅当退出 emacs 才保存, 这会丢掉不少数据.
;; 2022-10-14 好像会丢记录, 问题再排查
;; (require 'midnight)
;; (add-hook! midnight #'recentf-save-list)
#+end_src

*** mark ring
mark-ring用于保存上次标记或选择的位置, 用于跳转很有用.

emacs 的 mark ring [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html#Mark-Ring][doc]]. emacs 会自动记录标记, 称为 mark ring. 鼠标选择, shift 选
择都算C-x C-x: 交换当前光标位置和 mark, 这样会跳转到上前 mark 的位置上, 不过会有
高亮, 按 C-g 取消

: set-mark-command
C-x C-@: 这是轮换全局 mark
C-u C-@: 这是轮换当前的 mark ring

- [[https://github.com/rolandwalker/back-button][rolandwalker/back-button: Visual navigation through mark rings in Emacs]]
- [[https://stackoverflow.com/questions/3393834/how-to-move-forward-and-backward-in-emacs-mark-ring][How to move forward and backward in Emacs' mark ring - Stack Overflow]]
- https://github.com/rolandwalker/back-button/blob/master/back-button.el
- [[https://github.com/slewsys/emacs-extensions/blob/main/mark-navigation.el][emacs-extensions/mark-navigation.el]]
- [[https://github.com/rolandwalker/back-button][rolandwalker/back-button: Visual navigation through mark rings in Emacs]]

**** core
#+name: e4fc036b
#+begin_src elisp
;; 要保证 C-u C-@ 连续调用有效
(setq set-mark-command-repeat-pop nil)

(defun gwp::jump-to-previous-mark ()
  (interactive)
  (let ((current-prefix-arg '(4)))     ; C-u
    (call-interactively #'set-mark-command)))

;; 根据手册: C-SPC C-SPC两次
;; 仅标记当前位置(push to mark ring), 但不选择
(defun gwp::mark-current-position ()
  (interactive)
  (call-interactively #'set-mark-command)
  (deactivate-mark))

(defun gwp::mark-and-save-buffer()
  "标记光标所在位置, 并保存buffer"
  (interactive)
  (call-interactively #'gwp::mark-current-position)
  ;; 保存时同当清理光标处空格
  (call-interactively #'delete-trailing-whitespace)
  (save-buffer))

(setq global-mark-ring-max 99
      mark-ring-max 99)
#+end_src

**** global mark ring
#+name: e48dc36a
#+begin_src elisp
;; https://stackoverflow.com/a/27661338
(defun marker-is-point-p (marker)
  "test if marker is current point"
  (and (eq (marker-buffer marker) (current-buffer))
       (= (marker-position marker) (point))))

(defun push-mark-maybe ()
  "push mark onto `global-mark-ring' if mark head or tail is not current location"
  (if (not global-mark-ring) (error "global-mark-ring empty")
    (unless (or (marker-is-point-p (car global-mark-ring))
                (marker-is-point-p (car (reverse global-mark-ring))))
      (push-mark))))


(defun backward-global-mark ()
  "use `pop-global-mark', pushing current point if not on ring."
  (interactive)
  (push-mark-maybe)
  (when (marker-is-point-p (car global-mark-ring))
    (call-interactively 'pop-global-mark))
  (call-interactively 'pop-global-mark))

(defun forward-global-mark ()
  "hack `pop-global-mark' to go in reverse, pushing current point if not on ring."
  (interactive)
  (push-mark-maybe)
  (setq global-mark-ring (nreverse global-mark-ring))
  (when (marker-is-point-p (car global-mark-ring))
    (call-interactively 'pop-global-mark))
  (call-interactively 'pop-global-mark)
  (setq global-mark-ring (nreverse global-mark-ring)))
#+end_src

**** marker-visit.el
#+name: ebb32bb1
#+begin_src elisp
;; https://github.com/deestan/emacs/blob/master/emacs-goodies-el/marker-visit.el
;;
;;; marker-visit.el --- navigate through a buffer's marks in order

;; Copyright (C) 2001 Benjamin Rutt
;;
;; Maintainer: Benjamin Rutt <brutt@bloomington.in.us>
;; Version: 1.1

;; This file is not part of GNU Emacs.

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published
;; by the Free Software Foundation; either version 2, or (at your
;; option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, send e-mail to
;; this program's maintainer or write to the Free Software Foundation,
;; Inc., 59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.

;;; Commentary:

;; This file provides a simple way to navigate among marks in a
;; buffer.  C-u C-SPC is similar, but takes you haphazardly around the
;; buffer.  Setting bookmarks is a lot of extra work if you just want
;; to jump around your buffer quickly; plus, you have to come up with
;; a name for every bookmark.

;; All the marks you've left while editing a buffer serve as bread
;; crumb trails of areas in the buffer you've edited.  It is
;; convenient to navigate back and forth among these marks in order.
;; This file provides two methods to do just that, marker-visit-prev
;; and marker-visit-next.  These two functions will take you, from
;; point, to the nearest mark in either direction.  The function
;; marker-visit-truncate-mark-ring will truncate the mark ring.

;; The marks you can visit in a buffer consist of: "the mark" plus the
;; contents of the mark-ring.

;;; Usage:

;; put this file in your load-path and add the line
;;
;; (require 'marker-visit)
;;
;; to your ~/.emacs file.
;;
;; This package is most useful when some easy-to-press keys are bound
;; to the functions marker-visit-prev and marker-visit-next.  See C-h
;; i m Emacs RET m Key Bindings RET for info on emacs key bindings.

;;; History:

;; 1.0 -> 1.1 Incorporated patch from Colin Walters to make the code
;; consistent with elisp code conventions mentioned in
;; (Info-goto-node "(elisp) Coding Conventions").

;;; Code:

;;utility remove-dupes function
(defun marker-visit-remove-dupes (ls)
  (cond
   ((null ls) '())
   ((member (car ls) (cdr ls)) (marker-visit-remove-dupes (cdr ls)))
   (t (cons (car ls) (marker-visit-remove-dupes (cdr ls))))))

;;create a sorted list of marks, including the point as mark, the
;;mark, and the contents of the mark-ring.
(defun marker-visit-get-sorted-mark-set (current-point-mark)
  (marker-visit-remove-dupes
   (sort
    (append (cons current-point-mark
		  (if (mark-marker) (list (mark-marker)) nil))
	    (mapcar (lambda (id) id) mark-ring))
    (lambda (a b) (< a b)))))

(defun marker-visit-no-markers-p ()
  (and (null mark-ring)
       (or (not (mark-marker))
	   (not (marker-position (mark-marker))))))

(defun marker-visit-warn (error-message)
  (message error-message)
  (beep))

;;;###autoload
(defun marker-visit-prev ()
  "From point, visit the nearest mark earlier in the buffer."
  (interactive)
  (if (marker-visit-no-markers-p)
      (marker-visit-warn "Mark does not point anywhere")
    (let* ((current-point-mark (point-marker))
	   (sorted-marks (marker-visit-get-sorted-mark-set current-point-mark))
	   (dest-mark nil))
      (while (not (equal current-point-mark (car sorted-marks)))
	(setq dest-mark (car sorted-marks))
	(setq sorted-marks (cdr sorted-marks)))
      (if dest-mark
	  (goto-char dest-mark)
	(marker-visit-warn "No previous mark to visit")))))

;;;###autoload
(defun marker-visit-next ()
  "From point, visit the nearest mark later in the buffer."
  (interactive)
  (if (marker-visit-no-markers-p)
      (marker-visit-warn "Mark does not point anywhere")
    (let* ((current-point-mark (point-marker))
	   (sorted-marks (marker-visit-get-sorted-mark-set current-point-mark))
	   (dest-mark nil)
	   (done nil))
      (while (not done)
	(if (equal current-point-mark (car sorted-marks))
	    (progn
	      (setq dest-mark (cadr sorted-marks))
	      (setq done t))
	  (setq sorted-marks (cdr sorted-marks))))
      (if dest-mark
	  (goto-char dest-mark)
	(marker-visit-warn "No next mark to visit")))))

;;;###autoload
(defun marker-visit-truncate-mark-ring ()
  "Truncate the `mark-ring'."
  (interactive)
  (setq mark-ring nil))
#+end_src

**** hydra
#+name: 00b43976
#+begin_src elisp
(require 'hydra)
(defhydra gwp::hydra-mark-ring-pop ()
  "goto last location"
  ("SPC" gwp::jump-to-previous-mark "prev mark")          ; 在org中可自动打开折叠的内容
  ("j" marker-visit-next "next mark")
  ("k" marker-visit-prev "prev mark")                     ; NOTE: org折叠的内容不会打开
  ("C-p" backward-global-mark "prev mark (global)")         ;
  ("C-n" forward-global-mark "next mark (global)")          ;
  ("r" gwp::org-show-context-at-point "org show context") ; 在org时: 跳转到被折叠的headline中很有用
  ("q" nil "quit"))
#+end_src

*** auto-save
开启自动保存
#+name: 1a29ba42
#+begin_src elisp
(setq
 ;; doom里已默认为true
 auto-save-default t
 ;; 默认为5秒. 这里改大一些, 避免编辑时自动保存太快, 光标前的空格被吞掉
 auto-save-visited-interval 30)

;; 自动保存至当前文件名, 而非临时文件
(auto-save-visited-mode +1)
#+end_src

*** smartparens
#+name: 649668b1
#+begin_src elisp
;; 高亮括号配对
(use-package paren
  :ensure nil
  :hook (after-init . show-paren-mode)
  :custom
  ;; (show-paren-style 'mixed)
  (show-paren-when-point-inside-paren t)
  (show-paren-when-point-in-periphery t)
  (show-paren-ring-bell-on-mismatch t)
  :init
  (custom-set-faces
   '(show-paren-match ((t (:foreground "gray100" :background "#9c7618" :weight bold))))))

(use-package smartparens
  :custom
  ;; Overlays are too distracting and not terribly
  ;; helpful. show-parens does this for us already (and is faster),
  ;; so...
  (sp-highlight-pair-overlay nil)
  (sp-highlight-wrap-tag-overlay nil)
  (sp-highlight-wrap-overlay nil)
  :hook
  (prog-mode . smartparens-mode)
  (org-mode . smartparens-mode))
;; (add-hook 'prog-mode-hook 'turn-on-smartparens-mode)
#+end_src

*** clipboard
#+name: dda75ec0
#+begin_src elisp
(use-package simple
  :ensure nil
  :custom
  ;; 从其它程序复制的内容也放至在kill-ring中, 不会因为emacs的操作而覆盖之前的内容
  (save-interprogram-paste-before-kill t))
#+end_src

*** auto revert
从 doom-emacs 中抄来的
#+name: 2bf53d30
#+begin_src elisp
(use-package autorevert
  ;; revert buffers when their files/state have changed
  :hook (focus-in . doom-auto-revert-buffers-h)
  :hook (after-save . doom-auto-revert-buffers-h)
  :hook (doom-switch-buffer . doom-auto-revert-buffer-h)
  :hook (doom-switch-window . doom-auto-revert-buffer-h)
  :config
  (setq auto-revert-verbose t ; let us know when it happens
        auto-revert-use-notify nil
        auto-revert-stop-on-user-input nil
        ;; Only prompts for confirmation when buffer is unsaved.
        revert-without-query (list "."))

  ;; `auto-revert-mode' and `global-auto-revert-mode' would, normally, abuse the
  ;; heck out of file watchers _or_ aggressively poll your buffer list every X
  ;; seconds. Too many watchers can grind Emacs to a halt if you preform
  ;; expensive or batch processes on files outside of Emacs (e.g. their mtime
  ;; changes), and polling your buffer list is terribly inefficient as your
  ;; buffer list grows into the hundreds.
  ;;
  ;; Doom does this lazily instead. i.e. All visible buffers are reverted
  ;; immediately when a) a file is saved or b) Emacs is refocused (after using
  ;; another app). Meanwhile, buried buffers are reverted only when they are
  ;; switched to. This way, Emacs only ever has to operate on, at minimum, a
  ;; single buffer and, at maximum, ~10 buffers (after all, when do you ever
  ;; have more than 10 windows in any single frame?).
  (defun doom-auto-revert-buffer-h ()
    "Auto revert current buffer, if necessary."
    (unless (or auto-revert-mode (active-minibuffer-window))
      (let ((auto-revert-mode t))
        (auto-revert-handler))))

  (defun doom-visible-buffers (&optional buffer-list)
    "Return a list of visible buffers (i.e. not buried)."
    (let ((buffers (delete-dups (mapcar #'window-buffer (window-list)))))
      (if buffer-list
          (cl-delete-if (lambda (b) (memq b buffer-list))
			buffers)
	(delete-dups buffers))))

  (defun doom-auto-revert-buffers-h ()
    "Auto revert stale buffers in visible windows, if necessary."
    (dolist (buf (doom-visible-buffers))
      (with-current-buffer buf
        (doom-auto-revert-buffer-h)))))
#+end_src

*** provide
#+name: 7b0203a1
#+begin_src elisp
(provide 'init-core)
#+end_src

** init-defaults.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-defaults.el
:END:
*** docs
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** mouse
中端粘贴时以当前编辑位置为准, 而非鼠标光标所在位置.
#+name: f794969f
#+begin_src elisp
(setq mouse-yank-at-point t)
#+end_src

*** crafted
#+name: d8ca820b
#+begin_src elisp
;; credit: crafted-defaults.el
;;
;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; Use "y" and "n" to confirm/negate prompt instead of "yes" and "no"
;; Using `advice' here to make it easy to reverse in custom
;; configurations with `(advice-remove 'yes-or-no-p #'y-or-n-p)'
;;
;; N.B. Emacs 28 has a variable for using short answers, which should
;; be preferred if using that version or higher.
(if (boundp 'use-short-answers)
    (setq use-short-answers t)
  (advice-add 'yes-or-no-p :override #'y-or-n-p))

;; Do not save duplicates in kill-ring
(customize-set-variable 'kill-do-not-save-duplicates t)

;; Better support for files with long lines
(setq-default bidi-paragraph-direction 'left-to-right)
(setq-default bidi-inhibit-bpa t)
(global-so-long-mode 1)

(provide 'init-defaults)
#+end_src


** init-completion.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-completion.el
:END:
*** docs
#+name: 290a045b
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** yasnippet
注意, 这里如果在 org 前加载 M-i 按键会被覆盖. 可能得用 general 来绑定?

#+name: 7db2aa5a
#+begin_src elisp
(use-package yasnippet
  :commands
  (yas-expand yas-minor-mode)
  :init
  (defun entropy/emacs-yas-enable-or-expand (&rest args)
    "Auto enable `yas-global-mode' when not as it and call
`yas-expand'."
    (interactive)
    (require 'yasnippet)
    (cond
     ((not yas-global-mode)
      (yas-global-mode)
      (yas-expand))
     (t
      (yas-expand))))
  :bind
  (:map prog-mode-map
   ("M-i" . entropy/emacs-yas-enable-or-expand)
   :map org-mode-map
   ("M-i" . entropy/emacs-yas-enable-or-expand)
   )
  :config
  ;; 不用TAB, 因为要避免 org 中与 tab 键冲突
  (unbind-key "TAB" yas-minor-mode-map)
  (unbind-key "<tab>" yas-minor-mode-map))
#+end_src

*** hippie-expand
#+name: 7f307588
#+begin_src emacs-lisp
;; Use hippie-expand instead of dabbrev-expand
;; (global-set-key (kbd "M-/") #'dabbrev-expand)
(global-set-key (kbd "M-/") #'hippie-expand)
;; the same behavior as the original `dabbrev-expand'
(setq hippie-expand-dabbrev-skip-space t)

;; adjust the list of functions that hippie-expand will try
(setq hippie-expand-try-functions-list
      '(
        try-expand-dabbrev-visible      ; first try the expansions from the currently visible parts
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-line
        try-expand-dabbrev-from-kill
        ;; try-expand-all-abbrevs
        ;; try-expand-list
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol
        ))
#+end_src

*** hydra
#+name: 23685638
#+begin_src elisp
(use-package hydra)
#+end_src

*** vertico
在补全窗口处, 按M-RET 强制以接受用户录入的内容, 忽略补全项(vertico-exit-input).

#+name: 3702e7df
#+begin_src elisp
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t))

(use-package vertico-repeat
  :after vertico
  :ensure nil
  :hook (minibuffer-setup . vertico-repeat-save)
  :bind
  ([remap ivy-resume] . vertico-repeat)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; 启用模糊匹配
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** consult
#+name: 02437dc0
#+begin_src elisp
(use-package consult
  :custom
  ;; https://github.com/minad/consult#live-previews
  ;; preview delayed
  ;; (consult-preview-key '(:debounce 1 any))
  ;; preview manually
  (consult-preview-key (kbd "M-."))
  :bind (
         ([remap apropos-command] . consult-apropos) ; SPC-h-a
         ;; avy-goto-line 更好用
         ;; ([remap goto-line] . consult-goto-line)
         ([remap isearch-forward] . consult-line)
         ([remap yank-pop] . consult-yank-pop)
         ([remap repeat-complex-command] . consult-complex-command)
         ([remap recentf-open-files] . consult-recent-file)
         ([remap bookmark-jump] . consult-bookmark)
         ([remap project-switch-to-buffer] . consult-project-buffer)
         ([remap switch-to-buffer] . consult-buffer)
         ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
         ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
         ([remap imenu] . consult-imenu)
         ([remap list-registers] . consult-register)
         ([remap gwp::rg] . consult-ripgrep)
         ([remap gwp::mark-ring] . consult-mark)
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history)                 ;; orig. previous-matching-history-element
         )
  ;; The :init configuration is always executed (Not lazy)
  :init
  :config
  (with-eval-after-load 'org
    (define-key org-mode-map [remap org-goto] #'consult-org-heading))
  )

;; (use-package consult-notes
;;   :commands (consult-notes consult-notes-search-in-all-notes)
;;   :config
;;   (setq consult-notes-sources `(("GTD"  ?g  "~/Notes/") ("all notes"  ?o  "~/.cache/notes")))
;;   )
#+end_src
*** TODO corfu
- [[https://github.com/minad/corfu][minad/corfu: corfu.el - Completion Overlay Region FUnction]]
- [[https://emacs-china.org/t/corfu/19688/78][Corfu 补全的使用姿势 - Emacs-general - Emacs China]]

TUI 的用户暂时不适合用 Corfu

*** embark
一个新的神器, 相当于 text 版的右键菜单.

重要文档
- [[https://github.com/oantolin/embark][oantolin/embark: Emacs Mini-Buffer Actions Rooted in Keymaps]]
- [[https://karthinks.com/software/fifteen-ways-to-use-embark/][Fifteen ways to use Embark | Karthinks]]

常规的 emacs 操作流程时选择命令, 然后再将命令应用于操作对象. embark 则相反流程.
embark 先选定对象, 再根据对象不同, 执行动作, 类似 ivy action, 但更通用.

在文本窗口中, 可自动识别 url, symbol 等动象, 并分配适用的执行函数. 可以多次执行
embark-act, 切换可能的操作对象.

可用的 keymap:
: embark-keymap-alist

也可自定义目标类型 [[https://github.com/oantolin/embark#defining-actions-for-new-categories-of-targets][oantolin/embark: Emacs Mini-Buffer Actions Rooted in Keymaps]]
: embark-target-finders

查看按键
: embark-bindings-in-keymap

在M-x 命令窗口可按 "I" 键查看命令所对应的 info.

#+name: 74ebe55a
#+begin_src emacs-lisp
;; 补全窗口显示补助等信息
(use-package marginalia
  :config
  (marginalia-mode))

(use-package embark
  :bind (
         ;; 相当于选中文件弹出右键菜单
         ("C-;" . embark-act)
         ;; more like `ivy-occur'
         ("C-c C-o" . embark-export)
         ;; 相当于选中文件双击, 用处不大
         ;; ("C-." . embark-dwim)
         )
  :custom
  ;; 前置命令序列后按C-h 可选择后续要执行的命令. 相当于 which-key 中的提示的可选
  ;; 命令可搜索后再选择了
  (prefix-help-command #'embark-prefix-help-command)
  )

(use-package embark-consult
  :if (featurep 'embark)
  :after consult)

;; 查看不同 mode 下的按键更方便(C-h RET)
(bind-key "C-m" 'embark-bindings-in-keymap help-map)
#+end_src

*** which-key
可 mode 对应的按键:
: which-key-show-major-mode
: which-key-show-minor-mode-keymap
#+name: b0577e97
#+begin_src elisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode)
  :diminish which-key-mode
  :custom
  (which-key-idle-delay 1)
  (which-key-sort-uppercase-first nil)
  :bind (([remap describe-keymap] . which-key-show-keymap))
  :config
  )
#+end_src
*** COMMENT ivy
#+name: dd8cc577
#+begin_src elisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
#+end_src

*** provide
#+begin_src elisp
(provide 'init-completion)
#+end_src
** init-edit.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-edit.el
:END:
*** docs
主要用 meow 和 general 来实现按键

#+name: 1d60bcbf
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** constants
#+name: 0894dac2
#+begin_src elisp
(defconst gwp::dwim-leader-key "s-w")
(defconst gwp::goto-leader-key "s-g")
(defconst gwp::local-leader-key "s-,")
#+end_src

*** general keybindings
#+name: f3f75fec
#+begin_src elisp
(use-package general
  :demand t
  :after meow
  :config
  ;;  prevent Key sequence starts with a non-prefix key errors
  (general-auto-unbind-keys)
  ;; 定义 "," 及 "g", "w" 开头的按键序列.
  (general-create-definer gwp::goto-leader-def
    :keymaps 'general-override-mode-map
    :prefix gwp::goto-leader-key)
  (general-create-definer gwp::local-leader-def
    :keymaps 'general-override-mode-map
    :prefix gwp::local-leader-key)
  (general-create-definer gwp::dwim-leader-def
    :keymaps 'meow-normal-state-keymap
    :prefix gwp::dwim-leader-key)

  ;; 方便定义在 Insert 状态下的一些编辑命令
  (general-create-definer gwp::text-edit-def
    ;; :prefix "C-c"
    :keymaps '(meow-insert-state-keymap))

  ;; 用于 help 及只读类文件
  (general-create-definer gwp::text-view-def
    :keymaps '(meow-motion-state-keymap meow-normal-state-keymap))

  ;; 高优先级
  ;; (general-create-definer gwp::local-def :keymaps 'local)

  ;; space leader key
  (general-create-definer gwp::leader-def
    :keymaps '(meow-normal-state-keymap meow-motion-state-keymap)
    :prefix "SPC"
    )

  ;; 取消某些容易误按, 不习惯的键
  (general-unbind "C-v" "C-z" "C-x C-z"))
#+end_src
*** local keymaps
#+name: edaec1b8
#+begin_src elisp
(general-define-key
 :prefix-map 'gwp::edit-map
 )

(general-define-key
 :prefix-map 'gwp::develop-map
 )
#+end_src

*** meow utils
#+name: 4e63ecbf
#+begin_src elisp
;;;###autoload
;; https://www.emacswiki.org/emacs/CopyingWholeLines
(defun gwp::copy-current-line (&optional arg)
  (interactive "p")
  (let ((buffer-read-only t)
        (kill-read-only-ok t))
    (kill-whole-line arg)))

;;;###autoload
(defun gwp::meow-insert-at-the-beginning ()
  (interactive)
  (if mark-active
      (call-interactively #'meow-insert-mode)
    (meow-join 1)
    (meow-append)))

;;;###autoload
(defun gwp::meow-insert-at-the-end ()
  (interactive)
  (if mark-active
      (call-interactively #'meow-insert-mode)
    (meow-line 1)
    (meow-append)))

;;;###autoload
;; https://www.gnu.org/software/emacs/manual/html_node/efaq/Matching-parentheses.html
(defun gwp::match-paren (arg)
  (interactive "p")
  (cond ((looking-at "\\s(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s)") (forward-char 1) (backward-list 1))
        (t (call-interactively #'meow-block))))

;;;###autoload
(defun gwp::meow-change-to-the-end ()
  (interactive)
  (meow-insert)
  (kill-line))

;;;###autoload
(defun gwp::meow-change-whole-line ()
  (interactive)
  (call-interactively #'crux-move-beginning-of-line)
  (call-interactively #'gwp::meow-change-to-the-end))
#+end_src
*** TODO meow states
[[https://github.com/krdzo/dotemacs/blob/master/init-kr.org#custom-states][meow-define-state]]

不同模式默认对应的 meow state
#+name: 00b73661
#+begin_src elisp
;;;###autoload
(defun meow/setup-states ()
  (add-to-list 'meow-mode-state-list '(org-agenda-mode . motion))
  ;; start shell/eshell in insert
  (add-to-list 'meow-mode-state-list '(shell-mode . insert))
  (add-to-list 'meow-mode-state-list '(eshell-mode . insert))
  )
#+end_src

*** meow setup normal
#+name: 672c2d79
#+begin_src elisp
(defun meow/setup-normal ()
  ;; normal commands
  (meow-normal-define-key
   ;; (cons "SPC" meow-space-keymap)
   '("<escape>" . keyboard-quit)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("0" . meow-expand-0)
   '("-" . negative-argument)
   ;; 常规移动操作
   '("h" . meow-left)
   '("j" . meow-next)
   '("k" . meow-prev)
   '("l" . meow-right)
   '("^" . meow-back-to-indentation)
   ;; 常规编辑操作
   '("i" . meow-insert)
   '("I" . gwp::meow-insert-at-the-beginning)
   '("a" . meow-append)
   '("A" . gwp::meow-insert-at-the-end)
   '("x" . meow-kill)                   ; 同 vi, 剪入 king-ring, 无选区时等效于 C-x 按键
   '("y" . meow-save)                   ; 同 vi, 复制到 king-ring, 无选区时复制当前行
   '("c" . meow-change)                 ; 同 vi, 删除选区内容, 无选区时等效于 C-c 按键
   '("C" . gwp::meow-change-whole-line) ; 同 vi, 修改整行
   '("K" . gwp::meow-change-to-the-end) ; 像 C-k, 但进入 insert mode
   '("p" . meow-yank)
   '("O" . meow-open-above)
   '("J" . crux-top-join-line)      ; 同vi, 合并下一行至当前行
   '("r" . meow-change-char)        ; 删除当前字符或选区(不进入 kill-ring), 同时进入 insert state
   '("d" . meow-delete)             ; 删除当前字符或选区(不进入 kill-ring)
   '("DEL" . meow-backward-delete)
   '("D" . meow-kill-whole-line)
   ;; 选区扩展操作
   '("." . meow-line)                ; 向下扩选一行, 按 "-." 向上扩选
   '("e" . meow-next-word)           ; 向前扩选, 以 word 为单位
   '("E" . meow-next-symbol)         ; 向前扩选, 以 symbol 为单位 (包括连字符等)
   '("b" . meow-back-word)           ; 反向操作, 等效于 "-e"
   '("B" . meow-back-symbol)         ; 反向操作, 等效于 "-E"
   '("o" . meow-reverse)             ; 反转选区方向. 若无选区, 则相当于 vi 中为 o
   '("u" . gwp::undo-dwim)
   '("U" . meow-pop-selection)       ; 撤销选择
   ;; 搜索与跳转
   '("/" . meow-visit)            ; 快速搜索, 按C-M-j 搜索任意字串
   '("n" . meow-search)           ; 向选区方向搜索, 可按 o 键改变当前选区方向
   '("f" . meow-find)             ; 含搜索字符
   '("t" . meow-till)             ; 不含搜索字符
   '("m" . point-to-register)
   '("`" . jump-to-register)
   ;; 常规选择
   '("%" . gwp::match-paren)
   '("*" . meow-mark-symbol)
   ;; '("q" . meow-mark-word)
   '("s" . meow-inner-of-thing)
   '("S" . meow-bounds-of-thing)
   '("(" . meow-beginning-of-thing)
   '(")" . meow-end-of-thing)
   '(";" . meow-cancel-selection)
   '("v" . meow-cancel-selection) ; 仿 vi
   '("V" . meow-block)            ; 逐级扩选, 按U 回退, 可替代 expand-region
   '("G" . meow-grab)             ; 相当于 vi 中的 visual mode
   '("C-v" . meow-grab)
   ;; 特殊功能
   '("]" . sp-unwrap-sexp)
   '("R" . sp-unwrap-sexp)                         ; 比] 容易按一些
   '("$" . ispell-word)
   '("=" . meow-goto-line)
   ;; '("z" . avy-goto-char-in-line)
   '("z" . meow-pop-selection)
   '("'" . repeat-complex-command)      ; 重复上一个需要 minibuffer 输入的命令
   '("Z" . repeat)                      ; 重复上一个命令
   )

  ;; 当无选区时执行的功能
  (setq
   meow-selection-command-fallback
   '(
     (meow-reverse . meow-open-below)
     (meow-kill . meow-keypad-start)    ; for C-x
     (meow-change . meow-keypad-start)  ; for C-c
     (meow-save . gwp::copy-current-line)
     ;; (meow-pop-selection . meow-pop-grab)
     (meow-beacon-change . meow-beacon-change-char)
     (meow-cancel-selection . meow-right-expand) ; 仿vi, 取消选择或扩选
     )))
#+end_src

*** meow setup leader
相当于 Ctrl-c 对应的按键.

问题: meow 中的 keypad 与 which-key 配合不好

#+name: f4be1bd9
#+begin_src elisp
;; Leader Key
(defun meow/setup-leader ()
  ;; 与 which-key 集成度不高
  ;; (meow-leader-define-key
  ;;  '("/" . meow-keypad-describe-key)
  ;;  '("?" . meow-cheatsheet))
  ;; (meow-normal-define-key
  ;;  '("," . "s-,")
  ;;  '("g" . "s-g")
  ;;  '("w" . "s-w")
  ;;  )

  (general-define-key
   :keymaps 'meow-normal-state-keymap
   "," (general-simulate-key "s-," :which-key "local")
   "g" (general-simulate-key "s-g" :which-key "goto")
   "w" (general-simulate-key "s-w" :which-key "dwim")
   :keymaps 'meow-motion-state-keymap
   "," (general-simulate-key "s-,")
   "g" (general-simulate-key "s-g")
   "w" (general-simulate-key "s-w")
   "j" (general-simulate-key "C-n")
   "k" (general-simulate-key "C-p")
   "h" (general-simulate-key "C-b")
   "l" (general-simulate-key "C-f")
   "y" #'meow-save
   "v" #'meow-cancel-selection
   ))
#+end_src

*** meow setup motion
用于 dired 等 mode

#+name: 60483a2d
#+begin_src elisp
;; 比如 dired, magit 生成的 buffer, 也许单独处理更好?
(defun meow/setup-motion ()
  (meow-motion-overwrite-define-key
   '("j"  "meow-next")
   '("k"  "meow-prev")
   '("<escape>" . ignore)
   )
  (meow-motion-overwrite-define-key
   '("," . "s-,")
   '("g" . "s-g")
   '("w" . "s-w")
   ))
#+end_src

*** meow setup keypad
KEYPAD is the state used for executing commands without modifier keys.

Entering KEYPAD state by pressing SPC in NORMAL or MOTION state.
*** meow insert state
#+name: 37628911
#+begin_src emacs-lisp
(defun meow/setup-insert ()
  (gwp::text-edit-def "C-v" #'gwp::yank-dwim))
#+end_src

*** meow install
meow 默认 C-d 只删除一个字符?
- https://github.com/meow-edit/meow/discussions/298

#+name: 9a723a5b
#+begin_src elisp
(use-package meow
  :demand t
  :init
  (meow-global-mode 1)
  :custom
  ;; 修改选中内容后退出 insert 模式时不要再选中该区域
  (meow-select-on-change nil)
  ;; 扩选指示字符显示延时
  (meow-expand-hint-remove-delay 5.0)
  ;; 默认在 org 中不显示扩选指示字符
  (meow-expand-exclude-mode-list nil)
  ;; 选择文字区域时光标位置与 vim 及其它软件一致
  ;; 2022-03-19: 会出一些怪问题, 禁用
  ;; (meow-cursor-type-normal 'hbar)
  ;; (meow-use-cursor-position-hack t)
  :config
  (setq meow-cursor-type-normal '(box . 2))
  (setq meow-cursor-type-insert '(bar . 2))
  ;; (setq delete-active-region t)
  ;; (setq meow-cursor-type-region-cursor 'bar)
  ;; https://github.com/meow-edit/meow/discussions/87
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow/setup-normal)
  (meow/setup-leader)
  (meow/setup-motion)
  (meow/setup-insert)
  (meow/setup-states)
  ;; If you want relative line number in NORMAL state(for display-line-numbers-mode)
  (meow-setup-line-number)
  ;; If you need setup indicator, see `meow-indicator' for customizing  hand.
  (meow-setup-indicator))
#+end_src


*** provide
#+name: 0e5a2fde
#+begin_src elisp
(provide 'init-edit)
#+end_src

** init-xxx.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-xxx.el
:END:
*** docs
暂时不好归类的内容
#+name: 9e836961
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** upcase/downcase
解决大小写, 首字母大写等问题. 仅在 meow insert mode 下生效

#+name: b76494d2
#+begin_src elisp
(gwp::text-edit-def
  "M-u" #'upcase-dwim
  "M-l" #'downcase-dwim
  "M-c" #'capitalize-dwim
  )
#+end_src

*** goto last change
#+name: 28526451
#+begin_src elisp
;; 比 goto-last-change 好用一些?
(use-package goto-chg)

(defhydra gwp::hydra-last-change ()
  ("j" goto-last-change "last change")  ; 用 p 按键容易误操作, 用N 安全些
  ("k" goto-last-change-reverse "previous change")
  ("c" recenter "recenter")
  ("r" gwp::org-show-context-at-point "org show context")
  ("q" nil "quit"))

(gwp::goto-leader-def
  :keymaps '(prog-mode-map org-mode-map)
  ";" '(goto-last-change :which-key "Go to where the last edit was made")
  )
#+end_src

*** avy goto
#+name: c84fab18
#+begin_src elisp
(use-package avy
  :config
  :after init-bindings
  (setq avy-all-windows t)
  :config

  ;; 2022-10-28: 不太管用
  ;; :bind
  ;; ([remap goto-line] . avy-goto-line)
  ;; ([remap goto-char] . avy-goto-char-timer)
  )

(bind-key "l" 'avy-copy-line gwp::edit-map)
(bind-key "L" 'avy-copy-region gwp::edit-map)
#+end_src

*** insert date
#+name: ab440ea2
#+begin_src emacs-lisp
;;;###autoload
(defun gwp::insert-date (arg)
  "Insert date at point. With prefix argument, insert date and time."
  (interactive "P")
  (insert (format-time-string "%Y-%m-%d"))
  (when arg
    (insert (format-time-string " %H:%M"))))

;; make it easier to update time-stamp
(gwp::text-edit-def "C-c i" #'gwp::insert-date)
#+end_src

*** white space
just-one-space 默认绑定为 ~Ｍ-SPC~, 不过 cycle-spacing 更有用些.

#+name: 989c4b3c
#+begin_src emacs-lisp
(setq show-trailing-whitespace t)

(gwp::text-edit-def
  ;; 删除多余空行, 仅保留一行
  "C-x C-o" #'delete-blank-lines
  ;; "C-c C-o" #'delete-blank-lines
  "C-o" #'cycle-spacing
  )
#+end_src

*** bindings: goto
仿 helix 编辑器
#+name: 6cb02a16
#+begin_src elisp
(gwp::goto-leader-def
  :keymaps '(meow-normal-state-keymap meow-motion-state-keymap)
  "g" (general-simulate-key "M-<" :which-key "goto first line")
  "e" (general-simulate-key "M->" :which-key "goto last line")
  "h" (general-simulate-key "C-a" :which-key "goto the beggining of line")
  "l" (general-simulate-key "C-e" :which-key "goto the end of line")
  "." '(avy-goto-line :which-key "goto line")
  "c" '(avy-goto-char-timer :which-key "goto char")
  "f" '(find-file-at-point :which-key "Locate file") ; emacs 自带的就很好 (ffap)
  )
#+end_src

*** provide
#+name: 382df7e2
#+begin_src elisp
(provide 'init-xxx)
#+end_src

** init-ui.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-ui.el
:END:
*** docs
#+name: b0fdf59c
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** core
#+name: 2f79944b
#+begin_src elisp
(setq inhibit-startup-message t)

;; 禁用不必要的界面元素
;; (tooltip-mode -1)           ; Disable tooltips

;; 服务器上使用编译 --without-x 选项
(when (boundp 'scroll-bar-mode)
  ;; Give some breathing room
  (set-fringe-mode 10)
  ;; Disable visible scrollbar
  (scroll-bar-mode -1))

(tool-bar-mode -1)          ; Disable the toolbar
(menu-bar-mode -1)            ; Disable the menu bar

;; 默认会bee bee
(setq visible-bell t)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

*** theme
#+name: 62b5d5bd
#+begin_src elisp
(use-package doom-themes
  :init (load-theme 'doom-nova t)
  :config
  )

(custom-set-faces
 '(org-todo ((t (:background "#263238" :foreground "yellow" :weight bold))))
 '(org-done ((t (:foreground "yellow" :weight bold :background "#263238"))))
 '(org-table ((t (:foreground "#e3f2fd"))))
 '(org-level-1 ((t (:foreground "#e3f2fd" :height 1.1 :background nil :weight normal :box nil))))
 '(org-level-2 ((t (:foreground "#e3f2fd" :height 1.0 :background nil :weight normal :box nil))))
 '(org-headline-done ((t (:foreground "gray" :weight normal))))
 )

(custom-set-faces
 ;; 当前行
 '(hl-line ((t (:background "#37474f"))))
 '(region ((t (:background "#555555"))))
 '(solaire-hl-line-face ((t (:background "#37474f"))))
 ;; meow-grab 时, 配色更清楚些
 '(secondary-selection ((t (:foreground "green"))))
 )
#+end_src

*** chinese font
#+name: 91a3ef0e
#+begin_src elisp
(when (display-graphic-p)
  (setq user-font
        (cond
         ((find-font (font-spec :name  "Sarasa Fixed SC")) "Sarasa Fixed SC")
         ((find-font (font-spec :name  "Iosevka")) "Iosevka")
         ((find-font (font-spec :name  "Inconsolata Nerd Font")) "Inconsolata Nerd Font")
         ((find-font (font-spec :name  "Ubuntu Mono")) "Ubuntu Mono")))

  (setq default-font-height 110)
  ;; (setq resolution-factor 2)
  ;; (setq ideal-font-size (eval (* 15 resolution-factor)))
  ;; (setq big-font-size (eval (* 18 resolution-factor)))
  (set-face-attribute 'default nil :font user-font :height default-font-height)
  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font user-font :height default-font-height)
  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font user-font :height default-font-height :weight 'regular))
#+end_src

*** chinese input/rime
可以用TAB来临时输入英文. 可以用Ctrl-.来临时切换中英文标点. 在输入过程中, 按z键临时拼音模式.
#+name: 5a1d21e9
#+begin_src elisp
;; https://github.com/jadestrong/dotfiles/blob/master/home/.doom.d/modules/input/chinese2/config.el
(defun gwp::rime-convert-string-at-point (&optional return-cregexp)
  "将光标前的字符串转换为中文."
  (interactive "P")
  (let ((string
         (if mark-active
             (buffer-substring-no-properties
              (region-beginning) (region-end))
           (buffer-substring-no-properties
            (point) (max (line-beginning-position) (- (point) 80)))))
        code
        length)
    (cond ((string-match "\\([a-z]+\\) *$" string)
           (setq code (match-string 0 string))
           (setq length (length code))
           (setq code (replace-regexp-in-string " +" "" code))
           (if mark-active
               (delete-region (region-beginning) (region-end))
             (when (> length 0)
               (delete-char (- 0 length))))
           (when (> length 0)
             (setq unread-command-events
                   (append (listify-key-sequence code)
                           unread-command-events))))
          (t (message "`rime-convert-string-at-point' did nothing.")))))

(defun gwp::rime-toggle-input ()
  "切换 rime 中文输入状态."
  (interactive)

  (let ((input-method "rime"))
    (toggle-input-method)
    ;; evil 下, 直接进入 insert 模式
    (when (rime-predicate-evil-mode-p)
      (if (= (+ 1 (point)) (line-end-position))
          (evil-append 1)
        (evil-insert 1)))

    ;; 进入 rime 输入状态后, 把误按的字符转换中文
    (when (meow-insert-mode-p)
      (when (string= current-input-method input-method)
        (gwp::rime-convert-string-at-point))
      )

    ;; 提示当前输入状态, 比看图标更醒目
    (if current-input-method
        (message "IME on")
      (message "IME off"))))

(use-package rime
  :custom
  (default-input-method "rime")
  :config
  (setq rime-user-data-dir "~/.local/share/fcitx5/rime")
  ;;; support shift-l, shift-r, control-l, control-r
  (setq rime-inline-ascii-trigger 'shift-l)
  ;; 临时英文中阻止标点直接上屏
  (setq rime-inline-ascii-holder ?x)      ; Any single character that not trigger auto commit
  ;; 添加C-.快捷键, 方便切换中英文标点(需要在rime输入时有效)
  (setq rime-translate-keybindings
        '("C-f" "C-b" "C-n" "C-p" "C-g" "C-."))

  ;; NOTE: 以下有时会让emacs crash
  ;; (setq rime-posframe-properties
  ;;       (list :background-color "#333333"
  ;;             :foreground-color "#dcdccc"
  ;;             :internal-border-width 10))
  (setq rime-show-candidate 'posframe)

  ;; 自动进入英文录入状态, 相当于直接输入英文
  (setq rime-disable-predicates
        '(
          meow-normal-mode-p
          meow-motion-mode-p
          meow-beacon-mode-p
          ;; 首字母为是英文字母时进入英文模式
          rime-predicate-after-alphabet-char-p
          ;; 将要输入的为大写字母时
          rime-predicate-current-uppercase-letter-p
          ;; 在 prog-mode 和 conf-mode 中除了注释和引号内字符串之外的区域
          ;; rime-predicate-prog-in-code-p
          ;; 在 (La)TeX 数学环境中或者输入 (La)TeX 命令时
          rime-predicate-tex-math-or-command-p
          ;; 在中文字符且有空格之后
          rime-predicate-space-after-cc-p
          ))
  ;; 进入连续英文状态, 空格或回车键上屏
  (setq rime-inline-predicates
        '(
          rime-predicate-space-after-cc-p
          ))
  :bind
  ;; 这里需要与fcitx配合: 去掉GTK_IM_MODULE, XMODIFIERS等FCITX输入法设置变量.
  (("C-SPC" . gwp::rime-toggle-input)
   ;; 在输入且有码上屏的状态下, 可用TAB临时切换英文.
   ;; (map! :map rime-active-mode-map :after ivy [tab] 'rime-inline-ascii)
   :map rime-active-mode-map
   ([tab] . rime-inline-ascii)
   ))
#+end_src

*** highlight
- [[https://emacs-china.org/t/package-symbol-overlay-symbol/7706][论坛讨论]]

要点:
- 光标置于symbol左右, symbol-overlay-put 可切换高亮状态. 切n/p可跳转至前后高亮的位置.
- 可同时高亮多组symbols. 每组独立控制.
- 当光标在symbol外时, 可用 symbol-overlay-switch-forward 来跳回到最近那组高亮的
  symbols. 要跳回起跳位置可按e键.
#+name: 3d5eeec1
#+begin_src elisp
;; symbol-overlay
;;;  a highlight-symbol replacement.
(use-package symbol-overlay
  :config
  ;; 用 transient 不如下面的好. 下面的可以用"."命令来重做上次的操作.
  (general-define-key :prefix-map 'gwp::symbol-overlay-map
                      "h" 'symbol-overlay-put
                      "r" 'symbol-overlay-rename
                      "t" 'symbol-overlay-toggle-in-scope
                      "n" 'symbol-overlay-switch-forward ; 当在高亮的字符外时, 可快速返回.
                      "p" 'symbol-overlay-switch-backward
                      "d" 'symbol-overlay-remove-all
                      "R" 'symbol-overlay-query-replace)
  ;; 等价设置; 备忘
  ;; (setq symbol-overlay-map (make-sparse-keymap))
  ;; (setq gwp::symbol-overlay-map (make-sparse-keymap))
  ;; (define-key gwp::symbol-overlay-map (kbd "h") 'symbol-overlay-put)
  ;; (define-key gwp::symbol-overlay-map (kbd "n") 'symbol-overlay-jump-next)
  ;; (define-key gwp::symbol-overlay-map (kbd "p") 'symbol-overlay-jump-prev)
  ;; (define-key gwp::symbol-overlay-map (kbd "w") 'symbol-overlay-save-symbol)
  ;; (define-key gwp::symbol-overlay-map (kbd "t") 'symbol-overlay-toggle-in-scope)
  ;; (define-key gwp::symbol-overlay-map (kbd "e") 'symbol-overlay-echo-mark)
  ;; (define-key gwp::symbol-overlay-map (kbd "d") 'symbol-overlay-jump-to-definition)
  ;; (define-key gwp::symbol-overlay-map (kbd "s") 'symbol-overlay-isearch-literally)
  ;; (define-key gwp::symbol-overlay-map (kbd "q") 'symbol-overlay-query-replace)
  ;; (define-key gwp::symbol-overlay-map (kbd "r") 'symbol-overlay-rename)
  )
#+end_src

*** COMMENT helpful
#+name: 2b13453c
#+begin_src elisp
(use-package helpful
  :demand t
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

*** line numbers
如果能显示相对行号, avy-goto-line可能就没必要了?
#+name: 885c9fa9
#+begin_src elisp
;; 方便绑定到 SPC-t-l
;;
;; 仅切换relative和none两种状态, doom的要切三种
(defun gwp::toggle-line-numbers ()
  (interactive)
  (if display-line-numbers
      (setq display-line-numbers 'nil)
    (setq display-line-numbers t)))

(defun gwp::display-line-numbers ()
  (setq display-line-numbers 'relative)
  (setq display-line-numbers t))

;; NOTE: org-mode在折叠状态下, 相对行号显示的是实际数目, 而非折叠后的, 这对编辑操作没多大帮助了.
;; ;; (add-hook 'org-mode-hook #'gwp::display-line-numbers)
(add-hook 'org-src-mode-hook #'gwp::display-line-numbers)
;; (add-hook 'prog-mode-hook #'gwp::display-line-numbers)
(add-hook 'rust-mode-hook #'gwp::display-line-numbers)

;; 全局设置
(setq display-line-numbers-type 'relative)
#+end_src

*** window/frame
**** ace window
[[https://github.com/abo-abo/ace-window][abo-abo/ace-window: Quickly switch windows in Emacs]]

切换至前一个最近访问的buffer所在的window, evil-window-mru
: SPC-w-p

撤消或恢复之前的窗口布局
: SPC-w-u, SPC-w C-r

用avy在多个窗口下跳转也很方便. 默认使用数字, 现改为字母, 更好按一些
#+name: 34bcfc6f
#+begin_src elisp
(use-package ace-window
  :custom
  ;; 仅当多于两个窗口时才提示选择
  (aw-scope 'frame)
  (aw-dispatch-always nil)
  (aw-dispatch-when-more-than 2)
  (aw-ignore-current t)
  ;; Set window selection keys to the home row ones.
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

;;;###autoload
(defun gwp::ace-select-window ()
  "选取某窗口放入当前窗口位置"
  (interactive)
  (call-interactively #'ace-swap-window)
  (call-interactively #'aw-flip-window)
  )
#+end_src

**** burly: save layout
可保存窗口的布局及对应的 buffer, 可正常处理 narrowed, indirect buffers
等特殊情况. 但目前不能正常处理中文编码, 遇到中文 heading 可能出错.

使用 SPC-W-s 来保存窗口布局, 使用 SPC-r-b 加载.

临时保存也可用 ivy-push-view, 该视图可用 buffer 切换.

也可用 consult-register-store, 但似乎不太灵光.

#+name: a207c706
#+begin_src elisp
(use-package burly)

(general-define-key
 :prefix-map 'gwp::window-map
 "S" #'burly-bookmark-windows
 "C-s" #'burly-bookmark-windows
 )
#+end_src

**** COMMENT bookmark/workspace
保存的 burly layout 可直接在新的 workspace 中打开. 可完全替代 doom 的功能, 但更
好用, bug 更少.
[2022-10-28 Fri] 以下为 doom 中可用的函数, 现弃之.
#+name: 14897c7b
#+begin_src elisp
(require 'ivy)

(defun gwp::bookmark-jump-workspace (bookmark)
  "Jump to BOOKMARK in new workspace."
  (interactive
   (list (bookmark-completing-read "Jump to bookmark (in another frame)"
                                   bookmark-current-bookmark)))
  (+workspace/new-named bookmark)
  (+workspace/switch-to bookmark)
  (bookmark-jump bookmark))

(defvar gwp::ivy-bookmark-actions
  '(("j" bookmark-jump-other-window "other window")
    ("d" bookmark-delete "delete")
    ("e" bookmark-rename "edit")
    ("s" bookmark-set "replace")
    ("f" bookmark-jump-other-frame "other frame")
    ("n" gwp::bookmark-jump-workspace "in new workspace"))
  "Default ivy actions for files.")

(ivy-set-actions 'counsel-bookmark gwp::ivy-bookmark-actions)
#+end_src


**** new frame
tear-off-window
#+name: 19e08aef
#+begin_src elisp
(defun gwp::display-current-buffer-other-frame ()
  "在其它 frame 中显式当前 buffer"
  (interactive)
  (switch-to-buffer-other-frame (current-buffer)))
#+end_src

**** switch buffer
这几个命令挺有用, 不过在 ivy 框架下使用应更便利. 比如 ivy-switch-buffer 时, 可按
C-o 选取相应的 action, 来操作选定的 buffer.

: switch-to-buffer-other-window
: switch-to-buffer-other-frame
: switch-to-buffer-other-tab
: switch-to-buffer

从以下变量可查看 ivy 默认定义的 actions
: ivy--actions-list

#+name: bf66c13f
#+begin_src elisp
(require 'ivy)

(defvar gwp::ivy-buffer-actions
  '(("j" switch-to-buffer-other-window "other window")
    ("x" counsel-open-buffer-file-externally "open externally")
    ("k" ivy--kill-buffer-action "kill")
    ("r" ivy--rename-buffer-action "rename")
    ("t" switch-to-buffer-other-tab "other tab")     ; 默认没有
    ("f" switch-to-buffer-other-frame "other frame") ; 默认没有
    )
  "Default ivy actions for files.")
(ivy-set-actions 'ivy-switch-buffer gwp::ivy-buffer-actions)
#+end_src

**** COMMENT 修改 frame 标题 方便 gnome-shell 桌面切换
#+name: da14a342
#+begin_src elisp
;; workspace@buffer-name: ~/foo/bar
(setq frame-title-format
      '((:eval (+workspace-current-name)) ;
        " | %b : "
        (:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))))
        ))
#+end_src

**** 放大窗口
自动放大当前窗口. 注意, 这类工具通过和doom的popup window有冲突. 需要的时候命令手
动开启.
- https://github.com/hlissner/doom-emacs/issues/2225

对应命令: SPC-w z
#+name: bfacbb8e
#+begin_src elisp
(use-package golden-ratio)
#+end_src

doom内置了几个命令:
- 水平放大: SPC-w-m-s
- 垂直放大: SPC-w-m-v

#+name: 9a32eb12
#+begin_src elisp
;; 新建frame时最大化窗口
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; 切换窗口最大化状态
;; ;; from https://gist.github.com/3402786
;; (defun gwp::toggle-maximize-window ()
;;   (interactive)
;;   (save-excursion
;;     (if (and (= 1 (length (window-list)))
;;              (assoc ?_ register-alist))
;;         (jump-to-register ?_)
;;       (progn
;;         (window-configuration-to-register ?_)
;;         (delete-other-windows)))))

;;;###autoload
(defun gwp::toggle-maximize-window ()
  "仅显示当前窗口?"
  (interactive)
  ;; (if (= 1 (length (window-list)))
  ;;     (winner-undo)
  ;;   (delete-other-windows))
  (if (and winner-mode
           (equal (selected-window) (next-window)))
      (winner-undo)
    (delete-other-windows)))

(defun gwp::maximize-window-vertically ()
  "纵向仅显示当前窗口"
  (interactive)
  (require 'windmove)
  (let* ((w1 (window-in-direction 'below))
         (w2 (window-in-direction 'above)))
    (cond ((or w1 w2)
           (save-excursion
             (while (ignore-errors (windmove-up)) (delete-window))
             (while (ignore-errors (windmove-down)) (delete-window))))
          ((and (not w1) (not w2))
           ;; 手动 undo 更合适些
           ;; (winner-undo)
           ))))

;; https://github.com/purcell/emacs.d/blob/master/lisp/init-windows.el
(defun sanityinc/split-window()
  "Split the window to see the most recent buffer in the other window.
Call a second time to restore the original window configuration."
  (interactive)
  (if (eq last-command 'sanityinc/split-window)
      (progn
        (jump-to-register :sanityinc/split-window)
        (setq this-command 'sanityinc/unsplit-window))
    (window-configuration-to-register :sanityinc/split-window)
    (switch-to-buffer-other-window nil)
    ))

(general-define-key
 :prefix-map 'gwp::window-map
 "z"       #'golden-ratio
 "1"       #'gwp::toggle-maximize-window
 "o"       #'gwp::toggle-maximize-window     ; show "only"
 "t"       #'gwp::maximize-window-vertically ; show top
 "`"       #'sanityinc/split-window
 )
#+end_src


**** 窗口大小
使用滚轮来修改窗口大小. Ctrl-Alt-scroll-up, Ctrl-Alt-scroll-down
- [[https://stackoverflow.com/questions/51879921/emacs-find-file-other-window-command-splits-buffer-vertically][Emacs find-file-other-window command splits buffer vertically - Stack Overflow]]

设置分屏阈值, 避免 find-file-other-window 垂直向分割为多个windows
#+name: 1429fad5
#+begin_src elisp
(setq split-width-threshold 200)        ; default is 160
#+end_src

hydra特别适合需要重复按键来完成的操作, 比如调整窗口大小.
#+name: f07dc327
#+begin_src elisp
(defhydra gwp/adjust-window-size ()
  "resize-window"
  ("h" enlarge-window-horizontally "decrease width")
  ("l" shrink-window-horizontally "decrease height")
  ("k" enlarge-window "increase height")
  ("j" shrink-window "increase width")
  ("q" nil "quit")
  )

(general-define-key
 :prefix-map 'gwp::window-map
 "a" #'gwp/adjust-window-size/body ; adjust
 )
#+end_src

**** clone buffer
clone 出的 buffer 可独立编辑, 视图变化互不影响. 有用.
: clone-indirect-buffer-other-window
: clone-indirect-buffer

**** keymap
#+name: 44d5ec48
#+begin_src elisp
;; keymaps for leader key
(use-package winner
  :custom
  ;; 去掉 C-c left, C-c right
  (winner-dont-bind-my-keys t))

(winner-mode 1)

(general-define-key
 :prefix-map 'gwp::window-map
 "s" #'split-window-below
 "v" #'split-window-right
 "h" #'windmove-left
 "j" #'windmove-down
 "k" #'windmove-up
 "l" #'windmove-right
 "d" #'delete-window
 "q" #'delete-window
 "=" #'balance-windows
 "u" #'winner-undo            ; 撤销窗口变动
 "w" #'ace-window             ; 替代 SPC-w-w
 "r" #'gwp::ace-select-window ; rotate
 "R" #'ace-swap-window        ; rotate
 "c" #'ace-delete-window      ; close other windows
 "f" #'tear-off-window        ; 类似于firefox中的标签变窗口 (float, move to new frame)
 "F" #'follow-mode            ; 同步滚动窗口, 可用于双窗口内容对比等
 )
#+end_src

*** COMMENT swiper
在 isearch 界面下, 按 M-s 切换至 swiper 界面

按键绑定: swiper-isearch-map

可用 ivy-push-view 来临时保存窗口视图, 可通过 buffer 来切换回该视图
[[https://oremacs.com/2016/06/27/ivy-push-view/][Bookmark the current window layout with Ivy · (or emacs]]

#+name: bf455395
#+begin_src elisp
(use-package ivy-hydra)

(use-package swiper
  :after ivy
  :bind
  (
   ;; ("C-s"   . swiper-isearch)
   ;; ("C-r"   . swiper-isearch-backward)
   ;; ("C-c v p" . ivy-push-view)
   ;; ("C-c v o" . ivy-pop-view)
   ;; ("C-c v ." . ivy-switch-view)
   :map swiper-map
   ("M-s" . swiper-isearch-toggle)
   :map isearch-mode-map
   ("M-s" . swiper-isearch-toggle)
   :map ctl-x-4-map
   ("C-s" . ivy-push-view)
   ))
#+end_src

*** provide
#+begin_src elisp
(provide 'init-ui)
#+end_src

** init-dired.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-dired.el
:END:
*** docs
- note: [[id:2d226fe6-2010-490e-99cf-1a53b511cc8c][dired 文件管理]]
- 据说这个很好, 可试一下 [[https://github.com/alexluigit/dirvish][alexluigit/dirvish: Dired can be a nice file manager.]]

常用命令:
- 在其它窗口打开文件: ,o 或 M-RET

#+name: e59d26a0
#+begin_src elisp
;;; -*- lexical-binding: t -*-
#+end_src

*** utils
#+name: c18cdaa7
#+begin_src elisp
(use-package fd-dired)

;;;###autoload
(defun gwp::dired-copy-file-path()
  "复制当前文件全路径"
  (interactive)
  (let ((current-prefix-arg '(0)))
    (call-interactively 'dired-copy-filename-as-kill)))

;;;###autoload
(defun gwp::dired-fd ()
  "使用 fd 递归搜索文件名, 生成 dired 视图"
  (interactive)
  (require 'fd-dired)
  (let ((args (read-string
               "Run fd (with args and search): "
               fd-dired-input-fd-args
               '(fd-dired-args-history . 1))))
    (fd-dired "." args)))
#+end_src

*** dired-omit/dired-collapse
隐藏.dotfiles, doom中默认omit的太少
#+name: 47bd2234
#+begin_src emacs-lisp
;; emacs 内置的包
(use-package dired-x
  :ensure nil
  :custom
  (dired-omit-verbose t)
  (dired-omit-files (rx (or
                         (seq bol (? ".") "#")
                         (seq bol "." (* anychar) eol) ; example: ".", "..", ".foo"
                         ))))

(use-package dired-collapse
  :commands (dired-collapse-mode)
  :init
  (add-hook 'dired-mode-hook #'dired-collapse-mode))
#+end_src


*** settings
#+name: f3b2a13e
#+begin_src elisp
(use-package dired
  :ensure nil
  :custom
  ;; 方便多个文件夹文件互动
  ;; Set this variable to non-nil, Dired will try to guess a default
  ;; target directory. This means: if there is a dired buffer
  ;; displayed in the next window, use its current subdir, instead
  ;; of the current subdir of this dired buffer. The target is used
  ;; in the prompt for file copy, rename etc.
  (dired-dwim-target t)
  (dired-auto-revert-buffer t)          ; don't prompt to revert; just do it
  (dired-recursive-copies  'always)
  (dired-recursive-deletes 'top)

  ;; Dired listing switches
  ;;  -a : Do not ignore entries starting with .
  ;;  -l : Use long listing format.
  ;;  -G : Do not print group names like 'users'
  ;;  -h : Human-readable sizes like 1K, 234M, ..
  ;;  -v : Do natural sort .. so the file names starting with . will show up first.
  (dired-listing-switches "-alhvG --group-directories-first") ; default: "-al"

  :config
  ;; Don't complain about this command being disabled when we use it
  (put 'dired-find-alternate-file 'disabled nil)
  ;; 安全第一
  (setq delete-by-moving-to-trash t))
#+end_src

*** bindings
#+name: 5a48a92b
#+begin_src elisp
(with-eval-after-load 'dired
  (setq dired-recursive-deletes 'top)
  (define-key dired-mode-map [mouse-2] 'dired-find-file)
  (define-key dired-mode-map (kbd "j") 'dired-next-line)
  (define-key dired-mode-map (kbd "k") 'dired-previous-line)
  (define-key dired-mode-map (kbd "h") 'dired-up-directory)
  (define-key dired-mode-map (kbd "l") 'dired-view-file)
  (define-key dired-mode-map (kbd "K") 'dired-kill-file) ; 移除 dired buffer 中某行, 不影响文件, 相当于过滤
  (define-key dired-mode-map (kbd "C-S-n") 'dired-create-directory)
  (define-key dired-mode-map (kbd "C-S-f") 'dired-create-empty-file)
  (define-key dired-mode-map (kbd "C-c C-q") 'wdired-change-to-wdired-mode)
  (define-key dired-mode-map (kbd "DEL") 'dired-up-directory)
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))

(gwp::local-leader-def
      :keymaps 'dired-mode-map
      "y" '(gwp::dired-copy-file-path :which-key "Copy file path")
      "h" '(dired-omit-mode :which-key "toggle hidden files")
      "t" '(dired-hide-details-mode :which-key "hide details")
      "!" '(dired-do-async-shell-command :which-key "Async shell command")
      "f" '(gwp::dired-fd :which-key "fd files"))
#+end_src

*** provide
#+begin_src elisp
(provide 'init-dired)
#+end_src

** init-workspace.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-workspace.el
:END:
*** docs
实现和 doom 中 workspace 类似的功能
#+name: 902df907
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** bindings
默认为 mark-page, 用处不大. 取消为与 meow 中按键方便. "x p" 可直达 project-mode 相关按键.
#+name: f95a72e3
#+begin_src elisp
(unbind-key "C-x C-p")
#+end_src

*** provide
#+name: f0f6f6eb
#+begin_src elisp
(provide 'init-workspace)
#+end_src

** init-develop.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-develop.el
:END:
*** docs
#+name: ab84316d
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** with-editor
magit 作者写的一个库, 方便使用当前 emacs 作为 EDITOR, 而非 shell 所定义的, 比如
vi, 来进行编辑.  比如 shell 中的 edit-command-line (C-X E) 功
能, 调用 EDITOR 来编辑当前命令行.

编辑完成, 按 "C-x #" 退出.
: with-editor-cancel, with-editor-finish

- [[https://emacs.stackexchange.com/questions/14008/default-magit-commit-state-in-evil][Default Magit commit state in Evil - Emacs Stack Exchange]]

#+name: 24325443
#+begin_src elisp
(use-package with-editor)

(add-hook 'shell-mode-hook  'with-editor-export-editor)
(add-hook 'eshell-mode-hook 'with-editor-export-editor)
(add-hook 'term-exec-hook   'with-editor-export-editor)
(add-hook 'vterm-mode-hook  'with-editor-export-editor)

;; 进入 insert 编辑模式
(add-hook 'with-editor-mode-hook 'meow-insert-mode)
#+end_src

*** find file in project
很有用的一个包
- [[https://github.com/redguardtoo/find-file-in-project][redguardtoo/find-file-in-project: Quick access to project files in Emacs]]

#+name: 81cb1ab5
#+begin_src elisp
(use-package find-file-in-project
  :config
  (setq ffip-use-rust-fd t))

;;;###autoload
(defun gwp::find-file-from-clipboard ()
  "打开 clipboard 中复制的文件路径"
  (interactive)
  (require 'find-file-in-project)
  (let ((path (simpleclip-get-contents)))
    (ffip-find-files path nil)))
#+end_src

*** magit
#+name: 8970c514
#+begin_src elisp
(general-define-key :prefix-map 'gwp::magit-map)

(use-package magit
  :demand t
  :config
  (setq magit-completing-read-function 'ivy-completing-read)
  ;; 隐藏untracked文件列表. 更多时候的操作是stage/commit
  (setq magit-section-initial-visibility-alist (quote ((untracked . hide))))
  ;;禁用magit中的gravatars支持, 响应能快一些.
  (setq magit-revision-show-gravatars nil)
  ;; 进入 magit-status 后, 将光标定在 unstaged 一栏
  (setq magit-status-initial-section '(2))

  :bind
  (:map gwp::magit-map
        ;; ("j" . magit-next-line)
        ;; ("k" . magit-previous-line)
        ("g" . magit-status)
        ("s" . magit-status)
        ("x" . magit-checkout)
        ("c" . magit-commit)
        ("p" . magit-push)
        ("u" . magit-pull)
        ("e" . magit-ediff-resolve)
        ("r" . magit-rebase-interactive)
        :map magit-status-mode-map
        ;; ("j" . magit-next-line)
        ;; ("k" . magit-previous-line)
        :map magit-hunk-section-map
        ;; ("j" . magit-next-line)
        ;; ("k" . magit-previous-line)
        ))


(use-package magit-popup)

;; 显示 src 中的 TODO FIXME 等项
(use-package magit-todos
  :diminish
  :after magit
  :config
  (magit-todos-mode)
  )
#+end_src

*** rust
#+name: a267f2ee
#+begin_src elisp
(use-package rust-mode)
(use-package cargo)

(eval-after-load 'rust-mode
  '(require 'smartparens-rust))
#+end_src

*** format all
[[https://github.com/lassik/emacs-format-all-the-code][lassik/emacs-format-all-the-code: Auto-format source code in many languages with one command]]

#+name: f2289888
#+begin_src elisp
;; 2022-10-28: 不设置的话不能正常处理 elisp 代码(org src block 中)
(use-package format-all
  :demand t
  :bind ("C-c C-f" . format-all-buffer)
  :config
  (setq format-all-default-formatters
        '(("Emacs Lisp" emacs-lisp)
          ("Python" black)
          ("Rust" rustfmt)
          ("Shell" shfmt)
          ("TOML" prettier)
          ("Lua" lua-fmt)
          ("Dockerfile" dockfmt)
          ("CMake" cmake-format)
          ("C" clang-format)
          ("C++" clang-format)
          ("HTML" html-tidy)
          ("JSON" prettier)
          ("YAML" prettier))))
#+end_src

*** citre
关于 [[https://github.com/universal-ctags/citre/blob/master/docs/user-manual/citre-peek.md][citre-peek]]

- [[https://emacs-china.org/t/citre-ctags/17604][Citre: 先进的 Ctags 前端 - Emacs-general - Emacs China]]
- (citre-jump-back): 需要定义tag文件(citre-create-tags-file), 支持跳转至函数定义, 很帅 (SPC-j-c-d, SPC-j-c-b)

#+name: f8651bde
#+begin_src elisp
(use-package citre
  :init
  ;; This is needed in `:init' block for lazy load to work.
  (require 'citre-config)
  ;; 用 transient 不如下面的好. 下面的可以用"."命令来重做上次的操作.
  :config
  (general-define-key :prefix-map 'gwp::citre-map
                      "j" 'citre-jump
                      "b" 'citre-jump-back
                      "c" 'citre-create-tags-file
                      "p" 'citre-peek))
#+end_src

*** elisp
#+name: 985a2495
#+begin_src elisp
(gwp::local-leader-def
  :keymaps 'emacs-lisp-mode-map
  "e" #'eval-last-sexp
  "r" #'eval-region
  "b" #'eval-buffer
  "d" #'eval-defun
  )
#+end_src

*** provide
#+begin_src elisp
(provide 'init-develop)
#+end_src

** init-org.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-org.el
:END:
*** docs
关于Tab键
- 默认是expand outline. 如果连续按会展开更深层的. 此时可移动下光标, 再回去按TAB就会缩回outline状态.

配置参考:
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
- [[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-org.el][.emacs.d/setup-org.el at master · kaushalmodi/.emacs.d]]

#+name: b402e642
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** basic
#+name: e2f6b646
#+begin_src elisp
(use-package org
  :config
  ;; treat .note files as org-mode
  (add-to-list 'auto-mode-alist '("\\.note\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("NOTE" . org-mode))

  (setq org-blank-before-new-entry nil)
  (setq org-default-notes-file (concat org-directory "/life.note"))

  ;; 保留以前的 Alt-Return 键行为, Alt-Return
  (org-defkey org-mode-map [(meta return)] 'org-meta-return)

  ;; https://orgmode.org/manual/Clean-view.html
  (setq org-startup-indented t)      ;Enable `org-indent-mode' on Org startup
  (with-eval-after-load 'org-indent
    (setq org-indent-indentation-per-level 1)) ;; default = 2

  ;; 对齐headline中的TAGs
  (setq org-tags-column -80)

  ;; 避免误编辑
  (setq org-catch-invisible-edits 'show-and-error))
#+end_src

*** view
#+begin_src elisp
;; https://orgmode.org/manual/Clean-view.html
(setq org-startup-indented t)      ;Enable `org-indent-mode' on Org startup
(with-eval-after-load 'org-indent
  (setq org-indent-indentation-per-level 1)) ;; default = 2

;; 对齐headline中的TAGs
(setq org-tags-column -80)

;; 方便用 property 来控制 image 显示大小
(setq org-image-actual-width nil)

;; 避免误编辑
(setq org-catch-invisible-edits 'show-and-error)

;; 避免显示subtree之间多余的空行
(setq org-cycle-separator-lines 0)

;; 禁用*bold*等标注的字体效果. 写代码时容易弄花显示. 比如__init__.
(setq org-fontify-emphasized-text nil)
#+end_src

*** reveal
#+name: 10584ca0
#+begin_src elisp
;; 显示光标所在处的内容
(defun gwp::org-show-context-at-point ()
  (interactive)
  (call-interactively #'org-show-subtree)
  ;; 从下面的命令看来的
  ;; (call-interactively 'org-mark-ring-goto)
  ;; (org-show-context 'mark-goto)
  ;; (when (or (org-invisible-p) (org-invisible-p2)) (org-show-context 'mark-goto))
  (call-interactively #'org-reveal))

;; 默认的为 org-reveal, 但不太好用
(bind-key "C-c C-r" 'gwp::org-show-context-at-point org-mode-map)
#+end_src

*** open at point
默认在另一窗口打开链接, 如果使用C-u参数, 则强制在本窗口打开.
#+name: 2f61258f
#+begin_src elisp
;; https://stackoverflow.com/questions/17590784/how-to-let-org-mode-open-a-link-like-file-file-org-in-current-window-inste
;; Depending on universal argument try opening link
(defun gwp::org-open-at-point-dwim (&optional arg)
  (interactive "P")
  (cond
   ((equal arg '(16))                    ; C-u C-u
    (let ((org-link-frame-setup (quote ((file . find-file)))))
      (org-open-at-point)))
   ((equal arg '(4))                     ; C-u
    (let ((org-link-frame-setup (quote ((file . find-file-other-frame)))))
      (org-open-at-point)))
   (t                                   ; the default behavior
    (let ((org-link-frame-setup (quote ((file . find-file-other-window)))))
      (org-open-at-point)
      (golden-ratio)))))

;; 注释代码时, 在org code block下特殊处理. 不然光标会跳开很远.
(defun gwp/comment-or-uncomment-dwim ()
  (interactive)
  (save-excursion
    (if (org-in-src-block-p)
        (progn
          (org-edit-src-code)
          (call-interactively 'comment-dwim)
          (org-edit-src-exit))
      (call-interactively 'comment-dwim))))

(bind-key "C-c C-o" 'gwp::org-open-at-point-dwim org-mode-map)

(gwp::local-leader-def
  :keymaps 'org-mode-map
  "o"      #'(gwp::org-open-at-point-dwim :which-key "open at point"))
#+end_src

*** enter-at-point
从 doom 中抄来的. 在org-src环境, 直接编辑代码, 而非执行

#+name: fbbec921
#+begin_src elisp
;; 取自doom org moudle
(defun gwp::org-dwim-at-point (&optional arg)
  "Do-what-I-mean at point.

If on a:
- checkbox list item or todo heading: toggle it.
- clock: update its time.
- footnote reference: jump to the footnote's definition
- footnote definition: jump to the first reference of this footnote
- table-row or a TBLFM: recalculate the table's formulas
- table-cell: clear it and go into insert mode. If this is a formula cell,
  recaluclate it instead.
- babel-call: edit org-src
- statistics-cookie: update it.
- latex fragment: toggle it.
- link: follow it
- otherwise, refresh all inline images in current tree."
  (interactive "P")
  (if (button-at (point))
      (call-interactively #'push-button)
    (let* ((context (org-element-context))
           (type (org-element-type context)))
      ;; skip over unimportant contexts
      (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
        (setq context (org-element-property :parent context)
              type (org-element-type context)))
      (pcase type
        (`clock (org-clock-update-time-maybe))

        (`footnote-reference
         (org-footnote-goto-definition (org-element-property :label context)))

        (`footnote-definition
         (org-footnote-goto-previous-reference (org-element-property :label context)))

        ((or `planning `timestamp)
         (org-follow-timestamp-link))

        (`babel-call
         (org-babel-lob-execute-maybe))

        (`statistics-cookie
         (save-excursion (org-update-statistics-cookies arg)))

        ;; Hacked by ybyygu at 2021-04-13
        ((or `src-block `inline-src-block)
         (org-edit-special arg))

        ((or `latex-fragment `latex-environment)
         (org-latex-preview arg))

        (`link
         (let* ((lineage (org-element-lineage context '(link) t))
                (path (org-element-property :path lineage)))
           (if (or (equal (org-element-property :type lineage) "img")
                   (and path (image-type-from-file-name path)))
               (org-toggle-inline-images)
             ;; 强制在本窗口打开
             (let ((current-prefix-arg '(16)))     ; C-u C-u
               (call-interactively #'gwp::org-open-at-point-dwim)))))

        ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
         (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
           (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

        (_
         (if (or (org-in-regexp org-ts-regexp-both nil t)
                 (org-in-regexp org-tsr-regexp-both nil  t)
                 (org-in-regexp org-link-any-re nil t))
             (call-interactively #'org-open-at-point)
           ;; (+org--toggle-inline-images-in-subtree
           ;;  (org-element-property :begin context)
           ;;  (org-element-property :end context))
           ))))))

(gwp::local-leader-def
  :keymaps 'org-mode-map
  "RET"    #'gwp::org-dwim-at-point
  [return] #'gwp::org-dwim-at-point
  )
#+end_src
*** link
默认用 firefox 打开, 可加过链接打开速度. 默认会经过 xdg-open, 有时很慢.

#+name: 7330d8ac
#+begin_src elisp
;; (setq browse-url-browser-function 'browse-url-firefox)

;; If available, use `xdg-open' to open URLs.
(setq-default
 browse-url-browser-function (quote browse-url-generic)
 browse-url-generic-program "xdg-open")
#+end_src

*** latex preview
默认公式预览图片太小, 改大一些([[https://emacs.stackexchange.com/questions/19880/font-size-control-of-latex-previews-in-org-files][URL]]).
- [[https://emacs.stackexchange.com/questions/30309/latex-preview-on-hidpi-display/30318#30318][LaTeX preview on HiDPI display - Emacs Stack Exchange]]

默认按键 C-c C-x C-l

#+begin_src elisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.5))
#+end_src

*** toggle
#+begin_src elisp
(defun gwp::org-toggle-checkbox ()
  (interactive)
  (unless (org-at-item-p)
    (call-interactively #'org-toggle-item))
  (let ((current-prefix-arg '(4)))     ; C-u
    (call-interactively #'org-toggle-checkbox)))
#+end_src

*** attach
#+name: 994db730
#+begin_src elisp
(require 'org-attach)
;; 可用父节点定义的 attach 目录
(setq org-attach-use-inheritance t)

(defun gwp::org-attach-auto-directory ()
  "为当前 headline 设置 DIR 属性 (基于 ID)"

  (interactive)
  (let* ((attach-dir (org-attach-dir-from-id (org-id-new)))
         (current-dir (file-name-directory (or default-directory
                                               buffer-file-name)))
         (attach-dir-relative (file-relative-name attach-dir current-dir)))
    (org-entry-put nil "DIR" attach-dir-relative)
    attach-dir))
#+end_src

*** zotero
- Note taken on [2022-10-26 Wed 10:45] \\
  使用 completing-read 代替 ivy-read 重写, 避免使用 ivy 相关代码

#+name: 458d7b11
#+begin_src elisp
(org-link-set-parameters "zotero" :follow #'gwp/org-zotero-open :export #'gwp/org-zotero-export)

(defun gwp/org-zotero-open (path)
  (setq url (format "zotero:%s" path))
  (browse-url url))

;; rust-modules
(add-to-list 'load-path "/home/ybyygu/Workspace/Programming/emacs/rust-modules")
(require 'zotero)

(defun gwp/zotero-search-by-tag (name)
  "Search Zotero entries by tag using ivy."
  (interactive "sTag: ")

  (let* ((candidates (zotero-search-items-by-tag name))
	 (item (completing-read "Zotero entries: " candidates nil t)))
    (gwp--zotero-open-attachments item)))

(defun gwp/zotero-search-by-collection (name)
  "Search Zotero entries by collection name using ivy."
  (interactive "sCollection: ")

  (let* ((candidates (zotero-search-items-by-collection name))
	 (item (completing-read "zotero entries: " candidates nil t)))
    (gwp--zotero-open-attachments item)))

(defun gwp--zotero-show-related-items (x)
  "show related items from selection"
  (let* ((candidates (zotero-get-related-items x))
	 (item (completing-read "Related: " candidates nil t)))
    (gwp--zotero-open-attachments item)))

(defun gwp--zotero-annotate-attachment (pdf-file)
  "Annotate the attachment with org-noter."
  (let ((annotation-file (expand-file-name (car org-noter-default-notes-file-names) (file-name-directory pdf-file))))
    (progn
      ;; create an empty annotation file if not exists
      (unless (file-exists-p annotation-file) (write-region "" nil annotation-file))
      (org-open-file pdf-file)
      (org-noter))))

(defun gwp--zotero-open-attachments (x)
  "ivy completion for zotero attachments."
  (let* ((candidates (zotero-get-selected-item-attachment-paths x))
	 (attach (completing-read "Open attachment: " candidates nil t)))
    (org-open-file attach)))

(defun gwp--zotero-insert-link (x)
  (let ((uri (zotero-get-selected-item-link x)))
    (if uri
        (progn
          (message "%s!" x)
          (insert "[[" uri "][" "zotero-item" "]]"))
      (error "No link extracted from: %s" x))))

(defun gwp--zotero-open-link (x)
  (let ((uri (zotero-get-selected-item-link x)))
    (if uri
        (progn
          (message "%s!" x)
          (org-link-open-from-string (format "[[%s]]" uri)))
      (error "No link extracted from: %s" x))))

(defun gwp/org-open-zotero-attachments-at-point (arg)
  "Handle zotero attachments in org-mode"
  (interactive "P")
  (let ((ct (org-element-context)))
    (if (eq 'link (org-element-type ct))
        (let ((link (org-element-property :raw-link ct)))
          (when link
            (let ((key (zotero-get-item-key-from-link link)))
              (if key
                  (gwp--zotero-open-attachments key)
                (error "Invalid zotero link!"))))))))

(defun gwp/org-open-zotero-related-at-point (arg)
  "Open related zotero items for zotero link at point"
  (interactive "P")
  (let ((ct (org-element-context)))
    (if (eq 'link (org-element-type ct))
        (let ((link (org-element-property :raw-link ct)))
          (when link
            (let ((key (zotero-get-item-key-from-link link)))
              (if key
                  (gwp--zotero-show-related-items key)
                (error "Invalid zotero link!"))))))))

(defun gwp/insert-new-zotero-item (arg)
  "Create a new zotero item (report)"
  (interactive "P")

  (let ((uri (zotero-create-new-note)))
    (if uri
        (progn
          (message "%s!" uri)
          (insert "[[" uri "][" "zotero-note" "]]"))
      (error "create zotero item failed!"))))

;; https://www.reddit.com/r/emacs/comments/f3o0v8/anyone_have_good_examples_for_transient/
(require 'transient)
(transient-define-prefix gwp/zotero-search-transient ()
  "Search zotero database"
  ["Search zotero items:"
   ("t" "search by tag" gwp/zotero-search-by-tag)
   ("c" "search by collection" gwp/zotero-search-by-collection)
   ("o" "open attachments at point" gwp/org-open-zotero-attachments-at-point)
   ("r" "open related items at point" gwp/org-open-zotero-related-at-point)
   ]
  )

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "z" '(gwp/zotero-search-transient :which-key "zotero"))
#+end_src

*** insert
**** custom
org-add-note: C-c C-z
#+begin_src elisp
(defun gwp::new-memo-time-stamp (arg)
  "Insert a new org-mode memo entry under heading at point."
  (interactive "P")
  (unless (org-at-heading-p)
    (org-up-element))
  (call-interactively 'crux-smart-open-line)
  (call-interactively 'org-insert-todo-subheading)
  (call-interactively 'org-time-stamp-inactive)
  (when (meow-normal-mode-p) (call-interactively 'meow-insert))
  (insert " "))

(defun gwp::new-item-time-stamp (arg)
  (interactive "P")
  (if (org-in-item-p)
      (progn
        (call-interactively 'org-beginning-of-item)
        (call-interactively 'org-insert-item))
    (insert "- "))
  (call-interactively 'org-time-stamp-inactive)
  (insert " ")
  (when (meow-normal-mode-p) (call-interactively 'meow-insert)))
#+end_src

**** bindings
#+name: 492d6ae4
#+begin_src elisp
(gwp::local-leader-def
 :keymaps 'org-mode-map
 "i"  #'(:ignore t :which-key "insert")
 "im" #'gwp::new-memo-time-stamp ; 简化操作
 "ii" #'gwp::new-item-time-stamp
 "in" #'org-add-note			; or C-c C-z
)
#+end_src

*** screenshots
- org-contrib: [[file:doom-emacs/.local/straight/repos/org-mode/contrib/lisp/org-screenshot.el][org-screenshot.el]]

目前最佳方案: 使用org-download来实现屏幕截图的功能
- 在firefox或screenshot等截图后复制到X11剪贴板.
- 调用org-download-clipboard完成图片插入操作.
  - 图片自动保存到org attachment目录
  - 自动添加图片显示参数, 设定在org中显示的大小
- 也可用 drag-and-drop 的方式来插入图片, 非常方便.
- 可以使用org-download-delete来删除当前image

目前的问题 ([2020-03-06 Fri])
- 第二次执行截图时, 如果clipboard无图, emacs会挂住, 现在无解.

#+name: 3b9396a6
#+begin_src elisp
(defun gwp/org-image-attributes-default (&optional caption)
  "default image attributes: caption, name label, width ..."
  "Annotate LINK with the time of download."
  (format (concat
           (concat  "#+caption: " (read-string "Caption: " caption) "\n")
           ;; set unique figure name
           (format "#+name: fig:%s\n" (substring (org-id-new) 0 8))
           ;; unit in px; for displaying in org-mode
           "#+attr_org: :width 800\n"
           ;; unit in cm; for exporting as odt
           "#+attr_odt: :width 10\n"
           )))

(defun gwp/org-insert-image-attributes (&optional caption)
  "insert image attributes such as caption and labels"
  (interactive)
  (insert (gwp/org-image-attributes-default caption)))

(defun gwp/org-download-annotate (link)
  "Annotate LINK with the time of download."
  (gwp/org-image-attributes-default))

(use-package org-download
  :commands
  org-download-delete
  org-download-yank
  org-download-clipboard
  :hook ((org-mode . org-download-enable)) ; 启用拖放功能
  :bind (:map org-mode-map
         ("C-c v" . org-download-clipboard))
  :config
  (setq org-download-method 'attach
        org-download-annotate-function 'gwp/org-download-annotate
        ;; org-download-image-html-width 900 ; in px
        ;; org-download-image-latex-width 16 ; in cm
        ;; 2021-09-03: 直接调用org-download-clipboard即可, 以下代码不必要
        ;; org-download-screenshot-method
        ;; (cond ((executable-find "txclip")  "txclip paste --image -o %s")
        ;;       ((executable-find "scrot") "scrot -s %s"))
        ))
#+end_src

*** superstar
#+name: 0caa1907
#+begin_src elisp
(use-package org-superstar
  :init
  ;; ◉ ○ ◆ » ◇ ▶ ▷
  (setq org-superstar-headline-bullets-list '("☰" "▶" "▷" "»"))
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

*** babel
**** docs
参考
- [[https://org-babel.readthedocs.io/en/latest/][Org Babel reference card]]

如何察看noweb展开后的代码:
- C-c C-v v: org-babel-expand-src-block

**** settings
#+name: 99465500
#+begin_src elisp
;; 编辑代码时在下方新开窗口
;;(setq org-src-window-setup 'split-window-below)
(setq org-src-window-setup 'current-window)
#+end_src

**** COMMENT template
[2022-10-21 Fri] 用 yasnippet 更合适
- http://orgmode.org/manual/Languages.html

#+name: e9fca5dc
#+begin_src emacs-lisp
(with-eval-after-load 'ob
  (setq org-structure-template-alist
        '(
          ("py" . "src python :results output")
          ("rs" . "src rust")
          ("el" . "src emacs-lisp")
          ("sh" . "src sh")
          )))
#+end_src

**** tangle
不缩进org-src块中的代码. 注意: 不直接设置为
"org-src-preserve-indentation t", 只设置
org-edit-src-content-indentation为0, 这样仅影响编辑的org, 不影响tangle
出的代码. 以前的org文档可以逐步调回来
#+name: d309f5b7
#+begin_src elisp
(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0) ;Default = 2

;; helper functions for literate programming
;; taking from: https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.org
(defun help/set-org-babel-default-header-args (property value)
  "Easily set system header arguments in org mode.

PROPERTY is the system-wide value that you would like to modify.

VALUE is the new value you wish to store.

Attribution: URL `http://orgmode.org/manual/System_002dwide-header-arguments.html#System_002dwide-header-arguments'"
  (setq org-babel-default-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args))))

;; 几个重要的header args:
(help/set-org-babel-default-header-args :padline "yes")
(help/set-org-babel-default-header-args :mkdirp "yes")
(help/set-org-babel-default-header-args :comments "link")
#+end_src

禁用当前代码块或整个headline. 如果再次使用即取消插入的header args. 还可以用
org-delete-property 删除 header-args
#+name: 661f0512
#+begin_src elisp
(defun gwp/org-babel-tangle-no()
  "Turn on or turn off tangling current code block"
  (interactive)
  (if (eq 'src-block (org-element-type (org-element-at-point)))
      (save-excursion
        (org-babel-goto-src-block-head)
        (if (re-search-forward ":tangle no" (line-end-position) t)
            (delete-region (match-beginning 0) (match-end 0))
          (org-babel-insert-header-arg "tangle" "no")))
    (org-set-property "header-args" ":tangle no")))
#+end_src

插入一个唯一的block name, 方便跳转
#+name: 1a4b128e
#+begin_src elisp
(defun gwp/org-src-insert-name ()
  "If it doesn't have a NAME property then assign it an unique name."
  (interactive)
  (let ((element (org-element-at-point)))
    (if (eq 'src-block (org-element-type element))
        (if (not (org-element-property :name element))
            (save-excursion
              (goto-char (org-babel-where-is-src-block-head))
              (let ((i (current-indentation)))
                (save-excursion (insert "#+name: " (substring (org-id-new) 0 8) "\n"))
                (indent-to i)))
          (message "source block alread named"))
      (message "not in source block"))))
#+end_src

#+name: 62fd7850
#+begin_src elisp
;;;###autoload
;; tangle blocks for current file at point
;; http://stackoverflow.com/questions/28727190/org-babel-tangle-only-one-code-block
;; call org-babel-tangle with C-u C-u
(defun gwp/org-babel-tangle-blocks()
  (interactive)
  ;; tangle blocks only for target file at point
  (let ((current-prefix-arg '(16)))     ; C-u C-u
    (call-interactively 'org-babel-tangle)))

;; narrow to subtree before calling org-babel-tangle
(defun gwp/org-tangle-subtree()
  "Tange src blocks in current subtree"
  (interactive)
  (org-narrow-to-subtree)
  (org-babel-tangle)
  (widen))

;;;###autoload
(defun gwp/org-edit-save-and-tangle ()
  "When in a sub-editing buffer, swith to the parent buffer and tangle the file blocks"
  (interactive)
  (save-excursion
    (org-edit-src-exit)
    ;; insert an unique code block name
    (gwp/org-src-insert-name)
    (call-interactively 'gwp/org-babel-tangle-blocks)
    (org-edit-src-code)))

;;;###autoload
(defun gwp::org-babel-tangle-dwim()
  "Tangle current file at point whenever in a sub-editing buffer or not"
  (interactive)
  ;; 标记当前位置
  ;; (gwp::mark-current-position)
  (if (org-src-edit-buffer-p)
      (gwp/org-edit-save-and-tangle)
    (if (eq 'src-block (org-element-type (org-element-at-point)))
        (progn
          ;; insert an unique code block name
          (gwp/org-src-insert-name)
          (call-interactively 'gwp/org-babel-tangle-blocks))
      (message "not in source block"))))
#+end_src

**** jump to org blocks/links
#+name: 8aa4aca8
#+begin_src elisp
(defhydra gwp/org-jump-block ()
  "jump to org blocks"
  ("n" org-next-block "next block")
  ("p" org-previous-block "prev block")
  ("q" nil "quit")
  )

(defhydra gwp/org-jump-link ()
  "jump to org links"
  ("n" org-next-link "next link")
  ("p" org-previous-link "prev link")
  ("q" nil "quit")
  )
#+end_src

**** jump to file
从org文件跳转到tangled file
- 这个包可用于与compile等跳转配合使用 [[https://github.com/EricCrosson/help-find-org-mode][help-find-org-mode]]

#+name: fa928b1c
#+begin_src elisp
;;;###autoload
(defun gwp::org-babel-tangle-jump-to-file ()
  "Jump to tangle file for the source block at point."
  (interactive)
  (let ((mid (point))
        (element (org-element-at-point))
        (body-start (save-excursion
                      (progn
                        (org-babel-goto-src-block-head)
                        (next-line)
                        (point)
                        )))
        (tangle-file (cdr (assq :tangle (nth 2 (org-babel-get-src-block-info 'light)))))
        offset)
    (if tangle-file
        (let ((block-name (org-element-property :name element))
              (tangle-file (expand-file-name tangle-file)))
          (if (file-readable-p tangle-file)
              (progn
                ;; open tangled file
                (find-file tangle-file)
                ;; if code block has a name, we jump to that block
                (when block-name
                  (beginning-of-buffer)   ; if point restored, the searching could fail
                  (when (search-forward (format "::%s" block-name) nil t)
                    (next-line)
                    (beginning-of-line)
                    (setq offset (- mid body-start))
                    (forward-char offset)
                    (recenter)
                    )))
            (error "Cannot open tangle file %S" tangle-file)))
      (message "not in source block"))))
#+end_src


跳回来可用(需要配合src block name一起使用):
: org-babel-tangle-jump-to-org

将tangle file中的修改返回给org
: org-babel-detangle

还有一个https://github.com/mtekman/org-tanglesync.el. 但使用上有限制 [[https://github.com/mtekman/org-tanglesync.el/issues/13][issue 13]].
**** jump to org
原版的似有bug, 不能精确复原光标位置.
#+name: 9b40c7cf
#+begin_src elisp
;;;###autoload
(defun gwp::org-babel-tangle-jump-to-org ()
  "Jump from a tangled code file to the related Org mode file."

  (require 'ol)
  (interactive)
  (let ((mid (point))
	start body-start end target-buffer target-char link block-name body)
    (save-window-excursion
      (save-excursion
    (while (and (re-search-backward org-link-bracket-re nil t)
            (not ; ever wider searches until matching block comments
             (and (setq start (line-beginning-position))
              (setq body-start (line-beginning-position 2))
              (setq link (match-string 0))
              (setq block-name (match-string 2))
              (save-excursion
                (save-match-data
                  (re-search-forward
                   (concat " " (regexp-quote block-name)
                       " ends here")
                   nil t)
                  (setq end (line-beginning-position))))))))
	(unless (and start (< start mid) (< mid end))
	  (error "Not in tangled code"))
        (setq body (buffer-substring body-start end)))
      ;; Go to the beginning of the relative block in Org file.
      (org-link-open-from-string link)
      (message "%s" link)
      (setq target-buffer (current-buffer))
      ;; (search-forward body)
      (if (string-match "[^ \t\n\r]:\\([[:digit:]]+\\)" block-name)
          (let ((n (string-to-number (match-string 1 block-name))))
            (if (org-before-first-heading-p) (goto-char (point-min))
              (org-back-to-heading t))
            ;; Do not skip the first block if it begins at point min.
            (cond ((or (org-at-heading-p)
                       (not (eq (org-element-type (org-element-at-point))
                		'src-block)))
                   (org-babel-next-src-block n))
                  ((= n 1))
                  (t (org-babel-next-src-block (1- n)))))
        (org-babel-goto-named-src-block block-name))
      (goto-char (org-babel-where-is-src-block-head))
      (forward-line 1)
      ;; Try to preserve location of point within the source code in
      ;; tangled code file.
      (let ((offset (- mid body-start)))
        (when (< end (+ offset (point))) ; ybyygu hacked here
          (forward-char offset)))
      (setq target-char (point)))
    (org-src-switch-to-buffer target-buffer t)
    (goto-char target-char)))
#+end_src
*** narrow
#+name: 097db727
#+begin_src elisp
;;;###autoload
(defun gwp::org-babel-narrow-to-tangle-heading ()
  "narrow至当前代码块对应的 tangle 文件所在级别"
  (interactive)
  (let ((org-indirect-buffer-display 'current-window)
	(tangle-file (cdr (assq :tangle (nth 2 (org-babel-get-src-block-info 'light)))))
        (start-position (point))
        offset)
    ;; :tangle no 不能算
    (if (and tangle-file (not (string= tangle-file "no")))
        (save-excursion
          (if (search-backward (format ":tangle %s" tangle-file) nil t)
              (progn
                (setq offset (- start-position (point)))
                (org-tree-to-indirect-buffer)
                (forward-char offset)
                (message "narrowed to heading: %s" tangle-file))
            (message "no root headline found")))
      (message "narrowed to headline at point")
      (org-tree-to-indirect-buffer))))
#+end_src
*** mark
方便选择org 链接
#+name: 82ecc499
#+begin_src elisp
(defun gwp::org-mark-link ()
  "Marks an org text link."
  (interactive)
  (let ((case-fold-search t)
        (re "\\[\\["))
    (unless (looking-at re)
      (search-backward-regexp re))
    (set-mark (point))
    (search-forward "]]")
    (exchange-point-and-mark)))
#+end_src

*** note
**** search all notes
搜索所有~/.cache/notes目录下所有.notes文件. 为了避免symlink文件不存在导致ivy报错,
我们使用自定义脚本ripgrep, 强制命令退出码为0. 注意~/.local/bin应在PATH变量中.

#+name: 21d90559
#+begin_src shell :tangle ~/.local/bin/ripgrep :shebang #! /bin/bash
/usr/bin/rg --follow "$@"

exit 0
#+end_src

#+name: 4971b464
#+begin_src emacs-lisp
;;;###autoload
(defun gwp::search-all-notes-ivy (&optional arg)
  "search all notes in ~/.cache/notes"
  (interactive)
  (let ((counsel-rg-base-command (list
                                  "ripgrep"
                                  "-M" "240"
                                  "--with-filename"
                                  "--no-heading"
                                  "--line-number"
                                  "--color" "never"
                                  "%s")))
    (if arg
        (counsel-rg arg "~/.cache/notes")
      (counsel-rg "" "~/.cache/notes"))))


;;;###autoload
(defun gwp::search-all-notes (&optional arg)
  "search all notes in ~/.cache/notes"
  (interactive)
  (require 'consult)
  (let ((consult-ripgrep-args (list
                               "ripgrep"
                               "--null"
                               "--no-heading"
                               "--path-separator" "/"
                               "--line-number"
                               "--color" "never"
                               ".")))
    (if arg
        (consult-ripgrep "~/.cache/notes" arg)
      (consult-ripgrep "~/.cache/notes" ""))))
#+end_src

**** find notes
#+name: 05419467
#+begin_src elisp
(require 'simpleclip)

(defun gwp::find-file-from-clipboard ()
  "打开 clipboard 中复制的文件路径"
  (interactive)
  (require 'find-file-in-project)
  (let ((path (simpleclip-get-contents)))
    (ffip-find-files path nil)))

(defun gwp::search-org-notes (query)
  "Perform a text search on `org-directory'."
  (interactive
   (list (if (use-region-p)
             (buffer-substring-no-properties
              (region-beginning)
              (region-end))
           "")))

  (require 'org)
  (let ((counsel-rg-base-command (list
                                  "ripgrep"
                                  "-M" "240"
                                  "--with-filename"
                                  "--no-heading"
                                  "--line-number"
                                  "--color" "never"
                                  "%s")))
    (counsel-rg query org-directory)
    ))


;; credit: https://github.com/CsBigDataHub/counsel-fd/blob/master/counsel-fd.el
(defvar gwp--fd-command "fd --hidden --color never "
  "Base command for fd.")

;;;###autoload
(defun counsel-fd-file-jump (&optional initial-input initial-directory)
  "Jump to a file below the current directory.
List all files within the current directory or any of its subdirectories.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search."
  (interactive
   (list nil
         (when current-prefix-arg
           (read-directory-name "From directory: "))))
  (let* ((default-directory (or initial-directory default-directory))
	 (d (completing-read "File: "
		      (split-string
		       (shell-command-to-string
			(concat gwp--fd-command "--type l --exclude '*.git'"))
		       "\n" t)
		      nil
		      t)))
    (find-file (expand-file-name d))))

(defun gwp::find-file-in-notes ()
  "Find a file under `~/.cache/notes', recursively."
  (interactive)
  (let ((default-directory "~/.cache/notes")
        (find-file-visit-truename t))
        (counsel-fd-file-jump)))
#+end_src

**** bindings
#+name: 515195f9
#+begin_src elisp
(general-define-key
 :prefix-map 'gwp::note-map
 ;; "s" 'gwp::search-org-notes
 "s" 'gwp::search-all-notes
 "f" 'gwp::find-file-in-notes
 )
#+end_src

**** TODO COMMENT update cache
需要 rebuild-note-cache.sh 命令 [[rebuild-notes][rebuild-notes]]

#+name: da4e0834
#+begin_src elisp
(defun gwp::update-notes-cache ()
  (interactive)
  (message (shell-command-to-string "rebuild-note-cache.sh")))

(require 'midnight)
(midnight-mode t)
(midnight-delay-set 'midnight-delay "3:30am")

(add-hook! midnight #'gwp::update-notes-cache)
#+end_src

*** capture
占位符:
| %:link                            | URL of the web-page                                  |
| %:description                     | The title of the web-page                            |
| %:initial / %i                    | Selected text.                                       |
| %x                                | Content of the X clipboard.                          |
| %(org-get-x-clipboard 'CLIPBOARD) | 强制使用X clipboard复制的内容, 而非primary clipboard |

#+name: 5dc0bf0f
#+begin_src emacs-lisp
(setq org-capture-templates
      '(
        ("n" "Note" entry (file "~/Notes/refile.note")
         "* %u %? %(org-get-x-clipboard 'CLIPBOARD)\n  %:initial\n" :prepend t)
        ("t" "Task" entry (file+headline "~/Notes/life.note" "Tasks")
         "* TODO %^T %? %(org-get-x-clipboard 'CLIPBOARD)\n  %i" :prepend t)
        ("r" "Research Memo" entry (file+headline "~/Notes/research.note" "Memo")
         "* %u %? %(org-get-x-clipboard 'CLIPBOARD)\n  %i\n" :prepend t)
        ("p" "Paper" entry (file+headline "~/Notes/research.note" "Literature")
         "* TODO %u %? %(org-get-x-clipboard 'CLIPBOARD)\n  %i\n" :prepend t)
        ("j" "Life Journal" entry (file+headline "~/Notes/life.note" "Journals")
         "* %u %? %(org-get-x-clipboard 'CLIPBOARD)\n  %i\n" :prepend t)
        ("N" "Note from protocol" entry (file "~/Notes/refile.note")
         "* %u %? [[%:link][%:description]]\n  %:initial\n" :prepend t)))
#+end_src

*** agenda
重要日程打 TODO+ASAP 标签.
**** 基本设置
#+name: 43fd72e2
#+begin_src emacs-lisp
(require 'org-agenda)

;; 2013-01-20: less is more
;; (setq org-agenda-files (append (file-expand-wildcards "~/Notes/*.note") (file-expand-wildcards "~/Notes/*/*.note")))
(setq org-agenda-files "~/Notes/.agenda_files")

;; the default is todo-start
(setq org-icalendar-use-scheduled (quote (event-if-not-todo event-if-todo todo-start)))
(setq org-icalendar-alarm-time 5)

;; Show all future entries for repeating tasks
(setq org-agenda-repeating-timestamp-show-all t)

;; do not show agenda dates if they are empty
(setq org-agenda-show-all-dates nil)

;; Sorting order for tasks on the agenda
(setq org-agenda-sorting-strategy
      (quote ((agenda time-up priority-down category-up)
              (todo priority-down)
              (tags priority-down))))

;; Start the weekly agenda today
(setq org-agenda-start-on-weekday nil)

;; do not include todo items
(setq org-agenda-include-all-todo nil)

;; 忽略已经完成的任务
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-scheduled-if-done t)

;; 退出 agenda buffer 时还原之前的窗口
(setq org-agenda-restore-windows-after-quit t)
#+end_src
**** window
在本窗口中显示 agenda
#+name: f1b60139
#+begin_src elisp
(setq org-agenda-window-setup 'current-window)
#+end_src

**** 自定义agenda命令
- SPC nn: 查看所有重要事项
- SPC nb: 查看当前重要事项

#+name: ded2ea25
#+begin_src emacs-lisp
;; description for "g" prefix
(setq org-agenda-custom-commands '(("g" . "GTD contexts")))

;; project overview
(add-to-list 'org-agenda-custom-commands
             '("gp" "Project"
               (
                (tags "Project+Action+TODO=\"TODO\""
                      (
                       (org-agenda-overriding-header "Project\n------------------")
                       (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))))
                (tags "Action+Study+TODO=\"TODO\""
                      (
                       (org-agenda-overriding-header "Topics\n------------------")
                       (org-agenda-files '("~/Notes/research.note"))
                       (org-agenda-sorting-strategy '(priority-down timestamp-up))
                       (org-agenda-max-entries 5)))
                (tags "Action+TODO=\"TODO\""
                      (
                       (org-agenda-overriding-header "生活琐事\n------------------")
                       (org-agenda-files '("~/Notes/life.note"))
                       (org-agenda-sorting-strategy '(priority-down timestamp-up))
                       (org-agenda-max-entries 5)))
                )
               ;; options set here apply to the entire block
               (
                (org-tags-match-list-sublevels nil)
                (org-agenda-prefix-format "%-20c ")
                (org-agenda-todo-keyword-format "")
                (org-agenda-remove-tags t)
                (org-agenda-compact-blocks t))))

(add-to-list 'org-agenda-custom-commands
             '("gt" "Tasks"
               (
                (agenda ""
                        (;; (org-agenda-entry-types '(:deadline :scheduled))
                         (org-agenda-span (quote month)) ;; or (org-agenda-span 90)
                         (org-agenda-include-diary nil)
                         (org-agenda-overriding-header "Agenda\n------------------")))
                (tags-todo "ASAP"
                           ((org-agenda-entry-types '(:timestamp))
                            (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                            (org-agenda-overriding-header "\nASAP\n------------------")
                            (org-agenda-sorting-strategy '(priority-down category-keep timestamp-up))
                            (org-agenda-max-entries 20)
                            (org-agenda-prefix-format "%-12c ")
                            (org-agenda-compact-blocks t)))
                (tags-todo "TODO={READ}"
                           ((org-agenda-overriding-header "\n待读列表\n------------------")
                            (org-agenda-sorting-strategy '(category-keep priority-down))
                            (org-agenda-remove-tags t)
                            (org-agenda-prefix-format "%-12c ")
                            (org-agenda-compact-blocks t)))
                )
               ;; options set here apply to the entire block
               (
                (org-tags-match-list-sublevels nil)
                ;; (org-agenda-files '("~/Notes/research.note" "~/Notes/life.note"))
                (org-agenda-todo-keyword-format "")
                (org-agenda-remove-tags t))
               ;; agenda view exported with: Ctrl-C a e
               ("~/Notes/agenda.html" "~/Notes/agenda.txt")))


(defun gwp::org-agenda-gtd-task ()
  "show gtd task"
  (interactive)
  (org-agenda nil "gt"))

(defun gwp::org-agenda-gtd-task-this-buffer ()
  "show gtd task for this buffer"
  (interactive)
  (if (equal major-mode 'org-mode)
      (org-agenda nil "gt" 'buffer))
  (message "not in org mode buffer"))

(general-define-key
 :prefix-map 'gwp::note-map
 "a" '(org-agenda :which-key "org agenda")
 "l" '(org-store-link :which-key "org store link")
 "c" '(org-capture :which-key "org capture")
 "n" '(gwp::org-agenda-gtd-task :which-key "org agenda (gtd)")
 "b" '(gwp::org-agenda-gtd-task-this-buffer :which-key "org agenda (gtd) this buffer")
 )
#+end_src

**** COMMENT 显示当前 buffer 事项
可用 org-agenda 代替, "SPC n a < g t"

[2022-10-12 Wed] 绑定为 SPC n b

见 [[https://stackoverflow.com/questions/29495419/agenda-view-of-the-current-buffer][emacs - Agenda view of the current buffer - Stack Overflow]]

#+begin_src elisp
(defun gwp::org-todo-list-current-file (&optional arg)
  "Like `org-todo-list', but using only the current buffer's file."
  (interactive "P")
  (let ((org-agenda-files (list (buffer-file-name (current-buffer)))))
    (if (null (car org-agenda-files))
        (error "%s is not visiting a file" (buffer-name (current-buffer)))
      (org-todo-list arg))))
#+end_src

**** COMMENT 后台自动导出日程. 暂时禁用
#+name: a49dc68d
#+BEGIN_SRC emacs-lisp
;; disabled for upgrading to org-9.0
;; auto export agenda
(defun gwp/run-agenda-store ()
  ""
  (message "Exporting agenda... ")
  (org-batch-store-agenda-views)
  (message "Agenda exported."))

;; export agenda if I am away for 2 minutes
(run-with-idle-timer 600 t 'gwp/run-agenda-store)
#+END_SRC

闲时显示日程. 有兼容性问题, 暂时禁用.
#+begin_src emacs-lisp
(use-package idle-org-agenda
  :after org-agenda
  :ensure t
  :config (idle-org-agenda-mode))

(custom-set-variables
 '(idle-org-agenda-interval 600) ;; 10 x 60 seconds
 '(idle-org-agenda-key "gt")     ;; Choose your specific agenda
 '(idle-org-agenda-mode t)
 )
#+end_src
**** bindings
#+name: fc776ca8
#+begin_src elisp
;; (unbind-key "h" org-agenda-mode-map)
;; (unbind-key "l" org-agenda-mode-map)
;; (unbind-key "j" org-agenda-mode-map)
;; (unbind-key "k" org-agenda-mode-map)

(bind-key "j" #'org-agenda-next-line org-agenda-mode-map)
(bind-key "k" #'org-agenda-previous-line org-agenda-mode-map)
#+end_src

*** encryption
#+name: 6f58facc
#+begin_src emacs-lisp
(require 'org-crypt)
(require 'epa-file)
(epa-file-enable)

;; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-crypt-tag-matcher "crypt")
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; GPG key to use for encryption
(setq org-crypt-key "38D95BC6411A87E7") ; ybyygu@gmail.com
(setq org-crypt-disable-auto-save nil)
#+end_src

*** protocol
#+begin_src elisp
(require 'org-protocol)
#+end_src

*** COMMENT read/done
基本弃用. 有待改进.
#+begin_src elisp
(defun gwp/enter-to-read-state()
  "evoke external shell script when entering READ state"
  (when (equal org-state "READ")
    (setq file (gwp/get-org-file-link-path))
    (if file
        (progn
          (setq cmd (concat "org-to-read.sh " (shell-quote-argument file)))
          (message cmd)
          (shell-command cmd))))
  (when (equal org-last-state "READ")
    (message "try to remove READ state")
    (setq file (gwp/get-org-file-link-path))
    (if file
        (progn
          (setq cmd (concat "org-read-done.sh " (shell-quote-argument file)))
          (message cmd)
          (shell-command cmd)))))
(add-hook 'org-after-todo-state-change-hook 'gwp/enter-to-read-state)

;; show a sparse-tree in READ keyword
(defun gwp/org-show-read-tree ()
  "show a sparse-tree in READ keyword"
  (interactive)

  (let ((base-vector [?\C-u ?\M-x ?o ?r ?g ?- ?s ?h ?o ?w ?- ?t ?o ?d ?o ?- ?t ?r ?e ?e return ?R ?E ?A ?D return]))
    ;; create new macro of the form
    ;; C-u M-x org-show-todo-tree RET READ RET
    (execute-kbd-macro (vconcat base-vector
                                (vector 'return)))))
#+end_src


*** dwim
#+name: 27b71342
#+begin_src elisp
(gwp::dwim-leader-def
  :keymaps 'org-mode-map
  "g" 'org-goto                                ; goto
  "t" 'org-todo                                ; todo
  "e" 'org-edit-special                        ; edit
  "a" 'org-attach                              ; attach
  "b" 'gwp::org-babel-tangle-dwim              ; babel
  "n" 'gwp::org-babel-narrow-to-tangle-heading ; narrow
  "j" 'gwp::org-babel-tangle-jump-to-file      ; jump to tangled file
  )

(gwp::dwim-leader-def
  :keymaps 'org-src-mode-map
  ;; "b" 'gwp/org-babel-tangle-dwim
  "q" 'org-edit-src-exit
  )
#+end_src

*** bindings
优化最常用的按键
#+name: dfee4224
#+begin_src elisp
;; org-insert-structure-template
;; 换到 org-edit-special 上更方便
(unbind-key "C-c C-,")
(bind-key "C-c C-, " 'org-edit-special org-mode-map)
(bind-key "C-c C-, " 'org-edit-src-exit org-src-mode-map)

;; org-priority
;; 很少用
(unbind-key "C-c ,")

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "a"  #'(:ignore t :which-key "attach")
 "aa" #'org-attach
 "an" #'gwp::org-attach-auto-directory)

(gwp::local-leader-def
  :keymaps 'org-mode-map
  "b"  #'(:ignore t :which-key "babel/buffer")
  "bn" #'gwp/org-babel-tangle-no
  "bj" #'gwp::org-babel-tangle-jump-to-file
  "bt" #'gwp/org-tangle-subtree
  "bb" #'org-switchb ; 仿SPC-b-b
  "b M-p" '(org-previous-block :which-key "previous block")
  "b M-n" '(org-next-block :which-key "next block"))

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "m"  #'(:ignore t :which-key "mark")
 "m." #'org-mark-element
 "mm" #'org-mark-ring-push
 "mp" #'org-mark-ring-goto
 "ml" #'gwp::org-mark-link
 "ms" #'org-babel-mark-block)

(gwp::local-leader-def
 :keymaps 'org-mode-map
 "-"  #'(org-ctrl-c-minus :which-key "toggle item (-)")
 "*"  #'(org-ctrl-c-star :which-key "toggle headline (*)")
 "t"  #'(:ignore t :which-key "toggle")
 "ti" #'(org-ctrl-c-minus :which-key "toggle item (-)")
 "th" #'org-toggle-heading
 "t:" #'org-toggle-fixed-width
 ;; 可用 C-c C-x C-l
 "tL" #'org-latex-preview
 ;; 可用 C-c C-x v
 "tI" #'org-toggle-inline-images
 "tc" #'gwp::org-toggle-checkbox
 "ts" #'org-sidebar-tree-toggle
)

(gwp::local-leader-def
 :keymaps 'org-mode-map
 [tab] '(org-next-link :which-key "goto next link")
 [backtab] '(org-previous-link :which-key "goto next link"))

(gwp::goto-leader-def
  :keymaps 'org-mode-map
  "k" '(org-up-element :which-key "goto up element")
  "j" '(org-next-visible-heading :which-key "next visible heading")
  ;; "h" '(org-beginning-of-line :which-key "goto the beginning of visible line")
  ;; "l" '(org-end-of-line :which-key "goto the end of visible line")
  ;; "k" '(org-backward-heading-same-level :which-key "backward heading")
  ;; "j" '(org-forward-heading-same-level :which-key "forward heading")
  )

(general-define-key
 :keymaps '(org-mode-map)
 "M-l" #'org-metaright   ; doom中默认为 demote-subtree
 "M-h" #'org-metaleft    ; doom中默认为 promote-subtree
 "M-k" #'org-metaup
 "M-j" #'org-metadown
 "M-p" #'org-backward-element
 "M-n" #'org-forward-element
 )
#+end_src

*** provide
#+name: 183d2d8f
#+begin_src elisp
(provide 'init-org)
#+end_src

** init-note.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-note.el
:END:
*** docs
可以 embark 改进
- [[https://github.com/emacs-citar/citar][emacs-citar/citar: Emacs package to quickly find and act on bibliographic references, and edit org, markdown, and latex academic documents.]]

仿 org-noter 但, 简化操作, 不依赖于 pdf-tools 等包, 可使用外部的 pdf 阅读器来处
理 pdf 文件.

pdf-tools 的缺点是太慢了, llpp 要快得多, 适合看稍大一些的文件. 使用 llpp 来打开
org-noter 生成的note, 用于打开打定的 PDF 页面.

: okular foo.pdf -p 5
: evince foo.pdf -p 5
: llpp foo.pdf -page 5

批注流程
- 使用 dired 打开某个 pdf 文件, 然后 ",nn", 在 pdf 所在目录生成并打开 annotation.note.
- 在 org-mode 下, 自建 heading, ",ni", 插入 property, 标明 pdf 页码信息.
- 在某 heading 下, ",no", 打开该 heading 对应的 pdf 文件及相应的页码

另外, 通过 [[https://github.com/ymarco/paper-mode][ymarco/paper-mode]], 也可以把 llpp 放到 emacs buffer 中.

#+name: 6efb7ce7
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** require
还是基于 org-noter 来开发, 能省一些事是一些.
#+name: 2ad3390b
#+begin_src elisp
(use-package org-noter
  :config
  (setq org-noter-always-create-frame nil))
#+end_src

*** create file
#+name: 8a535ad4
#+begin_src elisp
(defun gwp::org-note::create-annotation-file (document-path)
  (let* ((note-file "annotation.note")
         (document-name (file-name-nondirectory document-path))
         (document-base (file-name-base document-name)))
    (with-current-buffer (switch-to-buffer (find-file-noselect note-file))
      (goto-char (point-max))
      (insert "* " document-base)
      (org-set-property org-noter-property-doc-file document-name)
      (save-buffer))))

;;;###autoload
(defun gwp::org-note::dired-annotate-file-at-point ()
  "标注 dired buffer 中所定的(pdf)文件"
  (interactive)
  (if (derived-mode-p 'dired-mode)
      (gwp::org-note::create-annotation-file (dired-get-file-for-visit))
    (user-error "not in dired buffer")))
#+end_src

*** handle READ
在 dired 中选中的文件(PDF) 放至 ~/Boox/READ 目录下, 文件在移动设备中阅读批注

keybinding [[id:424e51bc-9a50-49dd-bf4f-33795aec2eaa][keymap]]

#+name: 7f3b3bee
#+begin_src elisp
(defun gwp::org-note::to-read-file-in-READ (document-path read-dir)
  (let* ((document-name (file-name-nondirectory document-path))
         (document-in-read (concat read-dir document-name)))

    ;; 将当前文件复制至READ 目录下
    (message (format "%s => %s" document-path document-in-read))
    (rename-file document-path document-in-read)
    ;; 再将该文件反向软链回当前目录
    (make-symbolic-link (file-truename document-in-read) document-path)))

;;;###autoload
(defun gwp::org-note::dired-annotate-pdf-in-READ ()
  "将 dired buffer 中所选定的(pdf)文件放至READ 目录下"
  (interactive)
  (if (derived-mode-p 'dired-mode)
      (let* ((read-dir (read-directory-name "分类目录: " "~/Boox/READ")))
        (gwp::org-note::to-read-file-in-READ (dired-get-file-for-visit) read-dir)
        (dired-do-redisplay))
    (user-error "not in dired buffer")))

;;;###autoload
(defun gwp::dired::symbol-link-move-back ()
  "在 dired 中, 将当前软链所指向的文件取回来, 同时删除源文件"
  (interactive)

  (if (derived-mode-p 'dired-mode)
      (let* ((this-file (dired-get-file-for-visit))
             (target-path (file-truename this-file)))
        (if (file-symlink-p this-file)
            (when (file-exists-p target-path)
              (delete-file this-file)
              (rename-file target-path this-file 1)
              (dired-do-redisplay)
              (message "Moved from: %s" target-path))
          (user-error "not a symlink file")))
    (user-error "not in dired buffer")))
#+end_src
*** backlinks
双向链接/反向链接是 roam research 里重要的特性.

[[https://github.com/landakram/org-z][landakram/org-z: Lightweight, Org-mode flavored zettelkasten links.]]

使用唯一的 ID 来管理 org heading 链接, 不依赖于文件名或 heading 字串, 可以保持链接的稳定性.
#+name: ac1d0086
#+begin_src elisp
;; (use-package org-id
;;   :custom
;;   (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))

(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+end_src

使用 counsel-org-link 也可用 ID 链接至本文档的 heading.

如何打开 ID 链接呢?
: org-id-track-globally
: org-link-parameters
: org-id-open
: org-id-find
: org-id-find-id-file
: org-id-locations-file

org 生成 ID 链接时, 会记录对应的文件路径, 然后在文件中搜索相应的 ID.
org-id-locations-file 默认在 ~/emacs/.org-id-locations

org 会自动扫描 org-directory 中的 org 文件, 找到有 ID 的文件名(org-id-find,
org-id-find-id-file).

ripgrep --files-with-matches "^\s*:ID: +ed7c"

以下代码用 patch 覆盖 org-id-find-id-file 函数, 让去从~/.cache/notes 下找?
#+name: 98fd4d7a
#+begin_src elisp
(use-package el-patch)

(defun gwp::org-id-find-id-file (id)
  (let* ((rg-command (format "ripgrep -l --color never -e '^\\s*:ID:\\s+%s' /home/ybyygu/.cache/notes" id))
         (output (shell-command-to-string rg-command))
         (file (car (split-string output "[\r\n]+" t))))
    ;; (message "%s" rg-command)
    file))

(el-patch-feature org-id)
(with-eval-after-load 'org-id
  (el-patch-defun org-id-find-id-file (id)
    "Query the id database for the file in which ID is located."
    (unless org-id-locations (org-id-locations-load))
    (or (and org-id-locations
             (hash-table-p org-id-locations)
             (gethash id org-id-locations))
        ;; Fall back on current buffer
        (or
         (gwp::org-id-find-id-file id)
         (buffer-file-name (or (buffer-base-buffer (current-buffer))
                               (current-buffer)))))))
#+end_src

org-sidebar 出现后可按在 item 上按 TAB 访问链接的文件位置(继承自 org-agenda?).

#+name: 48102b4f
#+begin_src elisp
(use-package org-sidebar
  :custom
  (org-sidebar-side 'left)                                                         ; 新版中 left 是默认
  (org-ql-sidebar-buffer-setup-hook nil)                                           ; 避免多行显示, 太乱
  (org-sidebar-default-fns '(gwp::org-sidebar--backlinks org-sidebar--todo-items)) ; 使用反链视图
  (org-sidebar-tree-jump-fn 'org-sidebar-tree-jump-source)                         ; 跳至源文件对应的位置, 而不是 narrowed heding
  :config
  ;; 避免误按
  (;; map! :map org-sidebar-tree-map
   ;;      [mouse-1] nil
   ;;      [drag-mouse-1] nil
   ))

;;;###autoload
(defun gwp::org-backlinks ()
  "显示指向当前 heading 的反向链接"
  (interactive)

  (let* ((org-sidebar-side 'right)
         (id (org-entry-get (point) "ID"))
         (custom-id (org-entry-get (point) "CUSTOM_ID"))
         (query (gwp::org-backlinks--get-query id custom-id)))
    (org-sidebar-ql (gwp::org-backlinks-search-files id)
      query :title (concat "Links to: " (org-get-heading t t)))))

(defun gwp::org-backlinks--get-query (id custom-id)
  (cond ((and id custom-id)
         ;; This will be slow because it isn't optimized to a single regexp.  :(
         (warn "Entry has both ID and CUSTOM_ID set; query will be slow")
         `(or (link :target ,(concat "id:" id))
              (link :target ,(concat "id:" custom-id))))
        ((or id custom-id)
         `(link :target ,(concat "id:" (or id custom-id))))
        (t (error "Entry has no ID nor CUSTOM_ID property"))))


;; reference:
;; (collection (funcall ffip-project-search-function cmd))
(defun gwp::org-backlinks-search-files (keyword)
  "搜索文件系统中所有的.note文件, 返回包含引用 keyword 的文件名"
  (let* (
         (rg-command (format "ripgrep -l --color never -e %s /home/ybyygu/.cache/notes" keyword))
         (output (shell-command-to-string rg-command))
         (collection (split-string output "[\r\n]+" t))
         result)
    ;; (message "shell output:\n%s\nshell output ends here" output)
    (dolist (file collection result) (push file result))
    result))

(defun gwp::org-sidebar--backlinks (source-buffer)
  "在 org-sidebar 中显示 backlinks buffer"
  (let* ((display-buffer (generate-new-buffer (format "org-sidebar<%s>" (buffer-name source-buffer))))
         (title (propertize (concat "反链条目: " (buffer-name source-buffer)) 'help-echo "含有指向当前heading链接的条目"))
         (id (org-entry-get (point) "ID"))
         (custom-id (org-entry-get (point) "CUSTOM_ID"))
         (source-buffers (gwp::org-backlinks-search-files id))
         query)
    (with-current-buffer display-buffer
      (setf org-sidebar-source-buffer source-buffer))

    ;; 如果当前 heading 无 ID, 不报错
    (condition-case err
        (setq query (gwp::org-backlinks--get-query id custom-id))
      (error
       (message "%s" (error-message-string err))
       (setq source-buffers nil)))
    (org-ql-search source-buffers
      query
      :buffer display-buffer
      :title title)

    display-buffer))
#+end_src

*** open
#+name: 1773f1a3
#+begin_src elisp
(defun gwp::org-note::get-pdf-file ()
  (save-excursion
    (if (search-backward ":NOTER_DOCUMENT" nil t)
        (progn
          (org-back-to-heading)
          (let ((pdf (org-element-property :NOTER_DOCUMENT (org-element-at-point))))
            (message "%s" pdf)))
      (message "no pdf doc found"))))

(defun gwp::org-note::get-pdf-page ()
  (save-excursion
    (org-back-to-heading)
    (let ((property (org-element-property :NOTER_PAGE (org-element-at-point))))
      (let ((value (car (read-from-string property))))
        (cond
         ((consp value) (car value))
         (t value))))))

;;;###autoload
(defun gwp::org-note::new-note ()
  "在当前 heading 下插入新的文献阅读笔记"
  (interactive)
  ;; (let ((current-prefix-arg '(4)))     ; C-u
  ;;   (call-interactively #'org-insert-heading))
  ;; (insert (read-string "笔记标题: "))
  (if (org-at-heading-p)
      (let ((page (read-number "PDF 页码: " 1)))
        (org-set-property "NOTER_PAGE" (number-to-string page)))
    (user-error "not at org heading.")))

;;;###autoload
(defun gwp::org-note::open-pdf ()
  "使用 llpp 来打开当前笔记对应的 pdf 文件, 并转到指定的页码"
  (interactive)
  (let ((page (gwp::org-note::get-pdf-page))
        (pdf (gwp::org-note::get-pdf-file)))
    (if page
        (start-process "llpp" nil "llpp" pdf "-page" (format "%s" page))
      ;; (start-process "okular" nil "okular" pdf "-p" (format "%s" page))
      (start-process "llpp" nil "llpp" pdf)
      ;; (start-process "okular" nil "okular" pdf)
      )))
#+end_src

*** bindings
#+name: 8ae833e2
#+begin_src elisp
(require 'dired)

(gwp::local-leader-def
  :keymaps 'dired-mode-map
  "n" #'(gwp::org-note::dired-annotate-file-at-point :which-key "PDF 批注")
  "R" #'(gwp::org-note::dired-annotate-pdf-in-READ :which-key "置入待读(READ)")
  "T" #'(gwp::dired::symbol-link-move-back :which-key "取回软链源文件")
  )

(require 'org)

(gwp::local-leader-def
  :keymaps 'org-mode-map
  "n" '(:ignore t :which-key "org note")
  "nb" #'gwp::org-backlinks
  "no" #'gwp::org-note::open-pdf
  )

#+end_src

*** provide
#+name: 8d4b377b
#+begin_src elisp
(provide 'init-note)
#+end_src
** init-eaf.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-eaf.el
:END:
*** docs
[[https://github.com/emacs-eaf/emacs-application-framework/wiki/Chemacs][Chemacs · emacs-eaf/emacs-application-framework Wiki]]

#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** load
#+name: f1b9d1b9
#+begin_src elisp
(use-package eaf
  :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
  :after org
  :config
  ;; (require 'eaf-file-manager)
  (require 'eaf-browser)
  (require 'eaf-image-viewer)
  (require 'eaf-pdf-viewer)
  (require 'eaf-demo)
  (require 'eaf-org)
  ;; (require 'eaf-interleave)
  ;; (require 'eaf-terminal)
  ;; (require 'eaf-evil)

  ;; 按键绑定等
  (defalias 'browse-web #'eaf-open-browser)
  (eaf-bind-key close_buffer "q" eaf-pdf-viewer-keybinding)
  (eaf-bind-key add_annot_highlight "d"  eaf-pdf-viewer-keybinding)
  (eaf-bind-key add_annot_underline "a" eaf-pdf-viewer-keybinding)
  (eaf-bind-key add_annot_squiggly "s" eaf-pdf-viewer-keybinding)
  (eaf-bind-key undo_annot_action "u" eaf-pdf-viewer-keybinding)
  (eaf-bind-key nil "SPC" eaf-pdf-viewer-keybinding) ;; unbind, see more in the Wiki
  (eaf-bind-key zoom_in "=" eaf-pdf-viewer-keybinding)
  (eaf-bind-key zoom_out "-" eaf-pdf-viewer-keybinding)
  (eaf-bind-key jump_to_page "p" eaf-pdf-viewer-keybinding)
  ;; (define-key eaf-mode-map* (kbd "C-c B") #'eaf-open-bookmark)

  (defun eaf-org-open-file (file &optional link)
    "An wrapper function on `eaf-open'."
    (eaf-open file))

  ;; use `emacs-application-framework' to open PDF file: link
  (add-to-list 'org-file-apps '("\\.pdf\\'" . eaf-org-open-file))
  :custom
  ;; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  ;; (eaf-browser-continue-where-left-off t)
  ;; (eaf-browser-enable-adblocker t)
  (eaf-pdf-dark-mode nil)
  (confirm-kill-processes nil)	; 退出不需要确认杀死进程
  ;; (browse-url-browser-function 'eaf-open-browser)
  )
#+end_src


*** provide
#+name: ba2c433d
#+begin_src elisp
(provide 'init-eaf)
#+end_src

** init-bindings.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-bindings.el
:END:
*** docs
全局按键绑定等, 不依赖于具体的 mode

#+name: a4d73c60
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** bindings: SPC
#+name: 4cf8c86c
#+begin_src elisp
(defun gwp::switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(gwp::leader-def
  "SPC" '(gwp::mark-and-save-buffer :which-key "Save buffer")
  "," '(gwp::jump-to-previous-mark :which-key "Jump to previous mark")
  "`" '(gwp::switch-to-previous-buffer :which-key "Switch to previous buffer")
  "u" '(universal-argument :which-key "Universal argument")
  )
#+end_src

*** bindings: SPC-b
#+name: 33105bcf
#+begin_src elisp
(gwp::leader-def
 "b" '(:ignore t :which-key "buffer")
 "bb" '(switch-to-buffer :which-key "switch buffer")
 "bd" '(kill-current-buffer :which-key "kill buffer")
 "bk" '(kill-current-buffer :which-key "kill buffer")
 "br" '(revert-buffer :which-key "revert buffer")
 "bn" '(next-buffer :which-key "next buffer")
 "bp" '(previous-buffer :which-key "previous buffer")
 "bm" '(bookmark-set :which-key "set bookmark")
 "bR" '(crux-rename-buffer-and-file :which-key "rename buffer file")
 )
#+end_src

*** bindings: SPC-s search
#+name: f220a2a2
#+begin_src elisp
(gwp::leader-def
 "s" '(:ignore t :which-key "search")
 "ss" '(isearch-forward :which-key "search buffer")
 "si" '(imenu :which-key "jump to symbol(imenu)")
 ;; gwp::rg 会虚拟命令, 待 consult remap
 "sd" '(gwp::rg :which-key "search directory")
 )
#+end_src

*** bindings: SPC-f
从spacemacs中改过来的
#+name: e13c7903
#+begin_src emacs-lisp
(defun spacemacs/open-in-external-app (file-path)
  "Open `file-path' in external application."
  (let ((process-connection-type nil))
    (start-process "" nil "xdg-open" file-path)))

(defun spacemacs/open-file-or-directory-in-external-app (arg)
  "Open current file in external application.
If the universal prefix argument is used then open the folder
containing the current file by the default explorer.
If two universal prefix arguments are used, then prompt for command to use."
  (interactive "P")
  (if (equal arg '(4))                  ; C-u
      (spacemacs/open-in-external-app (expand-file-name default-directory))
    (let ((file-path (if (derived-mode-p 'dired-mode)
                         (dired-get-file-for-visit)
                       buffer-file-name)))
      (if file-path
          (if (equal arg '(16))         ; C-u C-u
              (progn
                (let ((program (read-shell-command "Open current file with: ")))
                  (call-process program nil 0 nil file-path)))
            (spacemacs/open-in-external-app file-path))
        ;; for EAF pdf
        (if (derived-mode-p 'eaf-mode)
            (eaf-open-external)
          (message "No file associated to this buffer."))))))
#+end_src

#+name: 45f27ad1
#+begin_src elisp
(gwp::leader-def
 "f" '(:ignore t :which-key "file")
 "ff" '(find-file :which-key "find files")
 "fr" '(recentf-open-files :which-key "recent files")
 "fs" '(write-file :which-key "save file as")
 "fj" '(dired-jump :which-key "jump to dired buffer")
 "fJ" '(dired-jump-other-window :which-key "jump to dired buffer (other window)")
 "fb" '(bookmark-jump :which-key "open bookmarks")
 "fo" '(spacemacs/open-file-or-directory-in-external-app :which-key "open externally")
 "fw" '(write-region :which-key "write region to file")
 )
#+end_src

*** bindings: SPC-q
#+name: 860eb4b2
#+begin_src elisp
(gwp::leader-def
 "q" '(:ignore t :which-key "quit/session")
 "qq" '(save-buffers-kill-terminal :which-key "Quit Emacs")
 "qk" '(save-buffers-kill-emacs :which-key "Kill Emacs (and daemon)")
 )
#+end_src

*** bindings: SPC-j
#+name: 92af756a
#+begin_src emacs-lisp
(gwp::leader-def
 "j" '(:ignore t :which-key "jump")
 "jo" '(gwp::org-babel-tangle-jump-to-org :which-key "jump to org src file")
 "jm" '(gwp::hydra-mark-ring-pop/body :which-key "emacs mark ring")
 "jc" '(gwp::hydra-last-change/body :which-key "last changed positions")
 )
#+end_src

*** bindings: SPC-o
emacs版的 "Open in Terminal": 在gnome-terminal中打开当前目录.

#+name: 826282dd
#+begin_src elisp
(defun gwp/open-in-gnome-terminal (the-directory)
  "Open `the-directory' in external gnome-terminal."
  (let ((process-connection-type nil))
    ;; (start-process "" nil "terminal-dwim.sh" (concat "--working-directory=" the-directory) "-e" "tmux")
    (start-process "" nil "alacritty" (concat "--working-directory=" the-directory) "-e" "tmux")
    ))

(defun gwp::open-terminal-here ()
  "Open the current dir in a new terminal window"
  (interactive)
  (let ((default-directory (or (and (eq major-mode 'dired-mode)
                                    (dired-current-directory))
                               default-directory)))
    (gwp/open-in-gnome-terminal (expand-file-name default-directory))))

(gwp::leader-def
 "o" '(:ignore t :which-key "open")
 "ot" '(gwp::open-terminal-here :which-key "open terminal here")
 "of" '(make-frame :which-key "open in new frame")
 )
#+end_src

*** bindings: SPC-r resume/ring
#+name: 574271f2
#+begin_src elisp
(gwp::leader-def
 "r" '(:ignore t :which-key "resume/ring")
 "rb" '(bookmark-jump :which-key "bookmarks")
 "rm" '(gwp::mark-ring :which-key "mark rings")
 ;; consult 里没有匹配的函数
 "rl" '(ivy-resume :which-key "resume last search")
 "rj" '(list-registers :which-key "resume registers")
  )
#+end_src

*** bindings: SPC-e edit
#+name: b357bbd9
#+begin_src elisp
(gwp::leader-def
  "e" '(:keymap gwp::edit-map :which-key "edit" :package emacs))
#+end_src

*** bindings: SPC-d develop
#+name: e724170b
#+begin_src elisp
(require 'recentf)
(defun gwp::zoxide-recent-directories ()
  (let* ((output (shell-command-to-string "zoxide query --list"))
         (dirs (split-string output "[\r\n]+" t)))
    dirs))

(defun gwp::dired-recent-directories ()
  (let* ((recent-dirs
          (mapcar (lambda (file)
                    (if (file-directory-p file) file (file-name-directory file)))
                  recentf-list)))
    recent-dirs))

(defun gwp::zoxide-add-directory (dir)
  "将 dir 加入 zoxide 数据库中"
  (message "add %s" dir)
  (when dir (call-process "zoxide" nil nil nil "add" dir)))

;; open recent directory
;; borrows from http://stackoverflow.com/questions/23328037/in-emacs-how-to-maintain-a-list-of-recent-directories
;;;###autoload
(defun gwp::recent-dirs ()
  "Present a list of recently used directories and open the selected one in dired"
  (interactive)
  (let* ((recent-dirs (delete-dups
		       (append (gwp::zoxide-recent-directories) (gwp::dired-recent-directories))))
	 ;; do not sort candidates
	 (vertico-sort-function nil)
	 (default-directory (completing-read "Directory: " recent-dirs nil t)))
    (gwp::zoxide-add-directory default-directory)
    (dired-jump)))

(gwp::leader-def
  ;; "d" '(:keymap gwp::develop-map :which-key "develop" :package emacs))
  "d" '(:ignore t :which-key "develop")
  "dr" '(gwp::recent-dirs :which-key "recent dirs")
  "dl" '(comment-dwim :which-key "comment/uncomment lines")
  "dh" '(:keymap gwp::symbol-overlay-map :package symbol-overlay :which-key "highlight symbol")
  "dj" '(:keymap gwp::citre-map :package citre :which-key "citre jump")
  )
#+end_src

*** bindings: SPC-h help
帮助系统
- apropos-value

#+name: e7792733
#+begin_src elisp
(gwp::leader-def
 "h" '(:keymap help-map :which-key "Help" :package emacs))

;; 可以查看不同 mode 下的按键绑定
(bind-key "m" 'describe-keymap help-map)
(bind-key "M" 'describe-mode help-map)
#+end_src

*** bindings: SPC-w window
#+name: c54b17b5
#+begin_src elisp
(gwp::leader-def
 "w" '(:keymap gwp::window-map :which-key "Window" :package emacs))
#+end_src

*** bindings: SPC-t toggle
#+name: 703c9a6f
#+begin_src elisp
(gwp::leader-def
 "t" '(:ignore t :which-key "toggle")
 "td" '(toggle-debug-on-error :which-key "debug on error")
 "tr" '(read-only-mode :which-key "read only")
 "tw" '(visual-line-mode :which-key "soft line wrapping")
 "tl" '(gwp::toggle-line-numbers :which-key "display line numbers")
 )
#+end_src

*** bindings: SPC-g magit
#+name: 185fc283
#+begin_src elisp
(gwp::leader-def
 "g" '(:keymap gwp::magit-map :which-key "Magit" :package magit))
#+end_src


*** bindings: SPC-y yank/clipboard
#+name: 035db3ed
#+begin_src elisp
;;;###autoload
(defun gwp::yank-relative-file-path ()
  "将 clipboard 的路径以相对路径的形式插入"
  (interactive)
  (let ((relative-path (file-relative-name (current-kill 0))))
    (unless (string= relative-path "")
      (kill-new relative-path)
      (call-interactively #'gwp::yank-dwim)
      )))

(gwp::leader-def
 "y" '(:ignore t :which-key "yank/clipboard")
 "yo" '(gwp::find-file-from-clipboard :which-key "find file from clipboard")
 "yf" '(gwp::yank-relative-file-path :which-key "yank relative file path")
 )
#+end_src


*** bindings: SPC-n note
#+name: 51e6b46e
#+begin_src elisp
(general-define-key :prefix-map 'gwp::note-map)
(gwp::leader-def "n" '(:keymap gwp::note-map :which-key "note" :package emacs))
#+end_src

*** provide
#+name: 1d4f6e72
#+begin_src elisp
(provide 'init-bindings)
#+end_src

** COMMENT init-xxx.el
:PROPERTIES:
:header-args: :tangle user-lisp/init-xxx.el
:END:
*** docs
#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

*** core
#+begin_src elisp
#+end_src

*** provide
#+begin_src elisp
(provide 'init-xxx)
#+end_src

* COMMENT Local variables
# Emacs:
# Local Variables:
# mode: org
# end:
